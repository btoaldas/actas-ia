# ============================================================================
# Script de instalaci√≥n del sistema de auditor√≠a - PowerShell
# Archivo: scripts\instalar_sistema_auditoria.ps1
# ============================================================================

param(
    [switch]$IncluirTablasUsuarios,
    [switch]$SoloMostrar,
    [string]$ExcluirTablas = "",
    [switch]$ActivarFrontend,
    [switch]$ActivarCelery
)

Write-Host "üîß Instalador del Sistema de Auditor√≠a - Actas Municipales" -ForegroundColor Cyan
Write-Host "=============================================================" -ForegroundColor Cyan

# Funci√≥n para verificar si Django est√° disponible
function Test-DjangoAvailable {
    try {
        & python manage.py check --quiet
        return $true
    }
    catch {
        return $false
    }
}

# Funci√≥n para verificar si PostgreSQL est√° funcionando
function Test-PostgreSQLConnection {
    try {
        & python -c "
import os
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
import django
django.setup()
from django.db import connection
cursor = connection.cursor()
cursor.execute('SELECT 1')
print('Connection OK')
"
        return $true
    }
    catch {
        return $false
    }
}

# Verificar requisitos previos
Write-Host "üìã Verificando requisitos previos..." -ForegroundColor Yellow

if (-not (Test-DjangoAvailable)) {
    Write-Host "‚ùå Django no est√° disponible o hay errores en la configuraci√≥n" -ForegroundColor Red
    exit 1
}

if (-not (Test-PostgreSQLConnection)) {
    Write-Host "‚ùå No se puede conectar a PostgreSQL" -ForegroundColor Red
    Write-Host "   Aseg√∫rate de que el servicio Docker est√© funcionando:" -ForegroundColor Yellow
    Write-Host "   docker-compose up -d" -ForegroundColor Gray
    exit 1
}

Write-Host "‚úÖ Requisitos verificados correctamente" -ForegroundColor Green

# Paso 1: Ejecutar migraciones del sistema de auditor√≠a
Write-Host ""
Write-Host "üìä Paso 1: Creando tablas del sistema de auditor√≠a..." -ForegroundColor Yellow

try {
    Write-Host "Ejecutando migraci√≥n SQL..." -ForegroundColor Gray
    & python -c "
import os
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
import django
django.setup()
from django.db import connection

# Leer y ejecutar el script SQL
with open('scripts/migrations/2025-09-06_sistema_logs_auditoria.sql', 'r', encoding='utf-8') as f:
    sql_script = f.read()

with connection.cursor() as cursor:
    cursor.execute(sql_script)
    
print('‚úÖ Tablas de auditor√≠a creadas correctamente')
"
    
    Write-Host "‚úÖ Tablas del sistema de auditor√≠a creadas" -ForegroundColor Green
}
catch {
    Write-Host "‚ùå Error creando tablas de auditor√≠a: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# Paso 2: Configurar triggers de auditor√≠a
Write-Host ""
Write-Host "‚ö° Paso 2: Configurando triggers de auditor√≠a..." -ForegroundColor Yellow

$comandoSetup = "python manage.py setup_auditoria"

if ($SoloMostrar) {
    $comandoSetup += " --solo-mostrar"
}

if ($IncluirTablasUsuarios) {
    $comandoSetup += " --incluir-tablas-sistema"
}

if ($ExcluirTablas -ne "") {
    $comandoSetup += " --excluir-tablas `"$ExcluirTablas`""
}

try {
    Write-Host "Ejecutando: $comandoSetup" -ForegroundColor Gray
    Invoke-Expression $comandoSetup
    
    if (-not $SoloMostrar) {
        Write-Host "‚úÖ Triggers de auditor√≠a configurados" -ForegroundColor Green
    }
}
catch {
    Write-Host "‚ùå Error configurando triggers: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# Paso 3: Instalar dependencias adicionales
if (-not $SoloMostrar) {
    Write-Host ""
    Write-Host "üì¶ Paso 3: Instalando dependencias adicionales..." -ForegroundColor Yellow
    
    try {
        # Instalar user-agents para parsing de User Agent
        & pip install user-agents
        Write-Host "‚úÖ Dependencia 'user-agents' instalada" -ForegroundColor Green
        
        # Verificar que psycopg2 est√© instalado para PostgreSQL
        & python -c "import psycopg2; print('psycopg2 OK')" 2>$null
        if ($LASTEXITCODE -ne 0) {
            Write-Host "Instalando psycopg2-binary..." -ForegroundColor Gray
            & pip install psycopg2-binary
        }
        Write-Host "‚úÖ Dependencias de base de datos verificadas" -ForegroundColor Green
        
    }
    catch {
        Write-Host "‚ö†Ô∏è  Advertencia: Algunas dependencias no se pudieron instalar" -ForegroundColor Yellow
        Write-Host "   Puedes instalarlas manualmente: pip install user-agents psycopg2-binary" -ForegroundColor Gray
    }
}

# Paso 4: Crear directorio de logs
if (-not $SoloMostrar) {
    Write-Host ""
    Write-Host "üìÅ Paso 4: Configurando directorios de logs..." -ForegroundColor Yellow
    
    $logsDir = "logs"
    if (-not (Test-Path $logsDir)) {
        New-Item -ItemType Directory -Path $logsDir -Force | Out-Null
        Write-Host "‚úÖ Directorio de logs creado: $logsDir" -ForegroundColor Green
    } else {
        Write-Host "‚úÖ Directorio de logs ya existe" -ForegroundColor Green
    }
    
    # Crear archivos de log iniciales
    $logFiles = @(
        "actas_general.log",
        "auditoria.log", 
        "celery_audit.log",
        "frontend_audit.log",
        "errores_sistema.log"
    )
    
    foreach ($logFile in $logFiles) {
        $logPath = Join-Path $logsDir $logFile
        if (-not (Test-Path $logPath)) {
            New-Item -ItemType File -Path $logPath -Force | Out-Null
        }
    }
    
    Write-Host "‚úÖ Archivos de log inicializados" -ForegroundColor Green
}

# Paso 5: Configurar frontend (opcional)
if ($ActivarFrontend -and -not $SoloMostrar) {
    Write-Host ""
    Write-Host "üåê Paso 5: Configurando logging frontend..." -ForegroundColor Yellow
    
    # Verificar que el archivo JavaScript existe
    $jsFile = "static\js\frontend-audit-logger.js"
    if (Test-Path $jsFile) {
        Write-Host "‚úÖ Script de auditor√≠a frontend encontrado" -ForegroundColor Green
        
        # Verificar que las URLs de API est√°n configuradas
        try {
            & python -c "
import os
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
import django
django.setup()
from django.urls import reverse
print('API URL:', reverse('frontend_logs_api'))
"
            Write-Host "‚úÖ URLs de API configuradas correctamente" -ForegroundColor Green
        }
        catch {
            Write-Host "‚ö†Ô∏è  Advertencia: URLs de API no est√°n configuradas" -ForegroundColor Yellow
        }
    } else {
        Write-Host "‚ö†Ô∏è  Archivo JavaScript de auditor√≠a no encontrado" -ForegroundColor Yellow
    }
}

# Paso 6: Configurar Celery (opcional)
if ($ActivarCelery -and -not $SoloMostrar) {
    Write-Host ""
    Write-Host "‚öôÔ∏è  Paso 6: Verificando configuraci√≥n de Celery..." -ForegroundColor Yellow
    
    try {
        & python -c "
import os
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
import django
django.setup()
from helpers.celery_logging import CeleryAuditLogger
print('‚úÖ Sistema de logging Celery configurado')
"
        Write-Host "‚úÖ Logging de Celery configurado correctamente" -ForegroundColor Green
    }
    catch {
        Write-Host "‚ö†Ô∏è  Advertencia: Error en configuraci√≥n de Celery logging" -ForegroundColor Yellow
    }
}

# Paso 7: Verificaci√≥n final
if (-not $SoloMostrar) {
    Write-Host ""
    Write-Host "üîç Paso 7: Verificaci√≥n final del sistema..." -ForegroundColor Yellow
    
    try {
        & python manage.py setup_auditoria --solo-mostrar > $null
        
        # Verificar que las tablas de auditor√≠a existen
        & python -c "
import os
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
import django
django.setup()
from django.db import connection

with connection.cursor() as cursor:
    # Verificar esquemas
    cursor.execute(\"\"\"
        SELECT COUNT(*) FROM information_schema.schemata 
        WHERE schema_name IN ('logs', 'auditoria')
    \"\"\")
    esquemas = cursor.fetchone()[0]
    
    # Verificar tablas
    cursor.execute(\"\"\"
        SELECT COUNT(*) FROM information_schema.tables 
        WHERE table_schema IN ('logs', 'auditoria')
    \"\"\")
    tablas = cursor.fetchone()[0]
    
    # Verificar funci√≥n de auditor√≠a
    cursor.execute(\"\"\"
        SELECT COUNT(*) FROM information_schema.routines 
        WHERE routine_schema = 'auditoria' 
        AND routine_name = 'registrar_cambio_automatico'
    \"\"\")
    funcion = cursor.fetchone()[0]
    
    print(f'Esquemas: {esquemas}/2')
    print(f'Tablas: {tablas}')
    print(f'Funci√≥n de auditor√≠a: {funcion}/1')
    
    if esquemas == 2 and tablas >= 8 and funcion == 1:
        print('‚úÖ Sistema de auditor√≠a instalado correctamente')
    else:
        print('‚ö†Ô∏è Sistema de auditor√≠a instalado parcialmente')
"
        Write-Host "‚úÖ Verificaci√≥n completada" -ForegroundColor Green
    }
    catch {
        Write-Host "‚ö†Ô∏è  Advertencia: No se pudo verificar completamente la instalaci√≥n" -ForegroundColor Yellow
    }
}

# Resumen final
Write-Host ""
Write-Host "üéâ Instalaci√≥n del Sistema de Auditor√≠a Completada" -ForegroundColor Green
Write-Host "====================================================" -ForegroundColor Green

if (-not $SoloMostrar) {
    Write-Host ""
    Write-Host "üìã Pr√≥ximos pasos:" -ForegroundColor Cyan
    Write-Host "1. Reinicia los servicios Django y Celery:" -ForegroundColor White
    Write-Host "   docker-compose restart actas_web actas_celery" -ForegroundColor Gray
    Write-Host ""
    Write-Host "2. Incluye el script de auditor√≠a en tus templates:" -ForegroundColor White
    Write-Host "   {% include 'includes/frontend_audit_script.html' %}" -ForegroundColor Gray
    Write-Host ""
    Write-Host "3. Verifica los logs en tiempo real:" -ForegroundColor White
    Write-Host "   Get-Content logs\auditoria.log -Wait" -ForegroundColor Gray
    Write-Host ""
    Write-Host "4. Accede a las estad√≠sticas de auditor√≠a:" -ForegroundColor White
    Write-Host "   http://localhost:8000/api/frontend-stats/" -ForegroundColor Gray
    Write-Host ""
    Write-Host "5. Para limpiar logs antiguos (despu√©s de 90 d√≠as):" -ForegroundColor White
    Write-Host '   python manage.py shell -c "from django.db import connection; cursor = connection.cursor(); cursor.execute(''SELECT * FROM logs.limpiar_logs_antiguos(90)''); print(''Logs limpiados'')"' -ForegroundColor Gray
    
    Write-Host ""
    Write-Host "‚ú® El sistema de auditor√≠a est√° listo para usar!" -ForegroundColor Green
    Write-Host "   Todas las actividades de usuarios, navegaci√≥n, errores y cambios" -ForegroundColor White
    Write-Host "   en la base de datos ser√°n registrados autom√°ticamente." -ForegroundColor White
} else {
    Write-Host ""
    Write-Host "Para instalar realmente el sistema, ejecuta:" -ForegroundColor Cyan
    Write-Host ".\scripts\instalar_sistema_auditoria.ps1" -ForegroundColor Gray
}
