#!/usr/bin/env python3
"""
Script de prueba para el sistema de notificaciones por email
Prueba la funcionalidad completa de env√≠o de notificaciones al publicar actas
"""

import os
import sys
import django
from pathlib import Path

# Configuraci√≥n del entorno Django
sys.path.append(str(Path(__file__).parent))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from django.contrib.auth.models import User
from gestion_actas.models import GestionActa
from gestion_actas.email_notifications import (
    enviar_notificacion_publicacion, 
    probar_configuracion_smtp,
    obtener_destinatarios_notificacion,
    enviar_notificacion_test
)
import logging

# Configurar logging para ver los detalles
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def main():
    print("=" * 70)
    print("üîî PRUEBA DEL SISTEMA DE NOTIFICACIONES POR EMAIL")
    print("=" * 70)
    
    # 1. Verificar configuraci√≥n SMTP
    print("\n1Ô∏è‚É£ Verificando configuraci√≥n SMTP...")
    print("-" * 50)
    try:
        # Nota: Esta funci√≥n intentar√° enviar un email de prueba
        # Cambiar el email de destino en la funci√≥n si es necesario
        configuracion_ok = probar_configuracion_smtp()
        print(f"Resultado: {'‚úÖ OK' if configuracion_ok else '‚ùå ERROR'}")
    except Exception as e:
        print(f"‚ùå Error en configuraci√≥n SMTP: {str(e)}")
    
    # 2. Verificar destinatarios
    print("\n2Ô∏è‚É£ Verificando destinatarios de notificaciones...")
    print("-" * 50)
    try:
        destinatarios = obtener_destinatarios_notificacion()
        print(f"üìß Total destinatarios encontrados: {len(destinatarios)}")
        
        for i, destinatario in enumerate(destinatarios, 1):
            print(f"   {i}. {destinatario['nombre']} ({destinatario['cargo']})")
            print(f"      üìß {destinatario['email']}")
            
        if not destinatarios:
            print("‚ö†Ô∏è  No se encontraron destinatarios. Revisar configuraci√≥n de usuarios.")
            
    except Exception as e:
        print(f"‚ùå Error obteniendo destinatarios: {str(e)}")
    
    # 3. Buscar acta publicada para prueba
    print("\n3Ô∏è‚É£ Buscando actas publicadas...")
    print("-" * 50)
    try:
        actas_publicadas = GestionActa.objects.filter(
            estado__codigo='publicada',
            acta_portal__isnull=False
        ).select_related('acta_portal', 'usuario_editor').order_by('-fecha_publicacion')
        
        print(f"üìã Actas publicadas encontradas: {actas_publicadas.count()}")
        
        if actas_publicadas.exists():
            acta_test = actas_publicadas.first()
            print(f"   ‚úÖ Usando acta: {acta_test.titulo}")
            print(f"   üìÖ Publicada: {acta_test.fecha_publicacion}")
            print(f"   üÜî ID Gestion: {acta_test.id}")
            print(f"   üåê ID Portal: {acta_test.acta_portal.id}")
            
            # 4. Probar notificaci√≥n con acta real
            print("\n4Ô∏è‚É£ Enviando notificaci√≥n de prueba...")
            print("-" * 50)
            
            usuario_test = acta_test.usuario_editor or User.objects.filter(is_superuser=True).first()
            
            try:
                resultado = enviar_notificacion_publicacion(
                    acta_gestion=acta_test,
                    acta_portal=acta_test.acta_portal,
                    usuario_publicador=usuario_test
                )
                
                if resultado:
                    print("‚úÖ Notificaci√≥n enviada exitosamente")
                else:
                    print("‚ùå Error enviando notificaci√≥n")
                    
            except Exception as e:
                print(f"‚ùå Error en notificaci√≥n de prueba: {str(e)}")
                
        else:
            print("‚ö†Ô∏è  No se encontraron actas publicadas para probar.")
            print("   üí° Publica una acta primero desde el sistema web.")
            
    except Exception as e:
        print(f"‚ùå Error buscando actas: {str(e)}")
    
    # 5. Informaci√≥n adicional
    print("\n5Ô∏è‚É£ Informaci√≥n del sistema...")
    print("-" * 50)
    try:
        total_usuarios = User.objects.count()
        usuarios_con_email = User.objects.exclude(email='').count()
        superusuarios = User.objects.filter(is_superuser=True).count()
        
        print(f"üë• Total usuarios: {total_usuarios}")
        print(f"üìß Usuarios con email: {usuarios_con_email}")
        print(f"üîë Superusuarios: {superusuarios}")
        
        # Verificar configuraci√≥n SMTP desde Django settings
        from django.conf import settings
        print(f"üì§ EMAIL_BACKEND: {getattr(settings, 'EMAIL_BACKEND', 'No configurado')}")
        print(f"üìß DEFAULT_FROM_EMAIL: {getattr(settings, 'DEFAULT_FROM_EMAIL', 'No configurado')}")
        
    except Exception as e:
        print(f"‚ùå Error obteniendo informaci√≥n del sistema: {str(e)}")
    
    print("\n" + "=" * 70)
    print("‚ú® PRUEBA COMPLETADA")
    print("=" * 70)
    print("\nüí° Notas:")
    print("   - Para probar env√≠o real, configure emails v√°lidos en los usuarios")
    print("   - Revise los logs de Django para m√°s detalles")
    print("   - El sistema usa la configuraci√≥n SMTP del GAD Pastaza (quipux@puyo.gob.ec)")
    print("   - En producci√≥n, mover credenciales SMTP a variables de entorno")


def prueba_rapida_acta(acta_id):
    """Funci√≥n auxiliar para probar una acta espec√≠fica"""
    try:
        print(f"\nüß™ PRUEBA R√ÅPIDA - ACTA ID: {acta_id}")
        print("-" * 40)
        
        resultado = enviar_notificacion_test(acta_id)
        
        if resultado:
            print("‚úÖ Prueba exitosa")
        else:
            print("‚ùå Prueba fallida")
            
        return resultado
        
    except Exception as e:
        print(f"‚ùå Error en prueba r√°pida: {str(e)}")
        return False


if __name__ == '__main__':
    # Ejecutar prueba completa por defecto
    if len(sys.argv) > 1:
        # Si se proporciona un ID de acta, hacer prueba r√°pida
        try:
            acta_id = int(sys.argv[1])
            prueba_rapida_acta(acta_id)
        except ValueError:
            print("‚ùå El ID del acta debe ser un n√∫mero")
    else:
        # Prueba completa del sistema
        main()