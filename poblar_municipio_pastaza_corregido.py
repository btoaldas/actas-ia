#!/usr/bin/env python
"""
Poblador corregido de datos realistas para el Municipio de Pastaza
Compatible con los campos reales de los modelos
"""

import os
import sys
import django
import random
from datetime import datetime, timedelta

# Configurar Django
sys.path.append('/app')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from django.contrib.auth.models import User
from django.utils import timezone
from apps.pages.models import TipoSesion, EstadoActa, ActaMunicipal
from apps.audio_processing.models import TipoReunion, ProcesamientoAudio
from apps.auditoria.models import SistemaLogs


class PobladorMunicipioPastazaCorregido:
    """Poblador corregido de datos del Municipio de Pastaza"""
    
    def __init__(self):
        self.autoridades_municipales = {
            'alcalde': {
                'nombres': 'Segundo Germ√°n',
                'apellidos': 'Flores Meza',
                'cargo': 'Alcalde',
                'email': 'alcalde@puyo.gob.ec'
            },
            'secretario_consejo': {
                'nombres': 'Danilo',
                'apellidos': 'Andrade',
                'cargo': 'Secretario de Consejo',
                'email': 'secretario.consejo@puyo.gob.ec'
            },
            'concejales': [
                {
                    'nombres': 'Roosevelt Wilmer',
                    'apellidos': 'G√≥mez Arias',
                    'cargo': 'Concejal Principal',
                    'email': 'rgomez@puyo.gob.ec'
                },
                {
                    'nombres': 'Luis Fernando',
                    'apellidos': 'Guevara Pab√≥n',
                    'cargo': 'Concejal Principal',
                    'email': 'lguevara@puyo.gob.ec'
                },
                {
                    'nombres': 'M√≥nica Gabriela',
                    'apellidos': 'Meza Bracho',
                    'cargo': 'Concejal Principal',
                    'email': 'mmeza@puyo.gob.ec'
                },
                {
                    'nombres': 'Jenny Judith',
                    'apellidos': 'Moncayo Peaza',
                    'cargo': 'Concejal Principal',
                    'email': 'jmoncayo@puyo.gob.ec'
                },
                {
                    'nombres': 'Laura Marisol',
                    'apellidos': 'P√©rez Heredia',
                    'cargo': 'Concejal Principal',
                    'email': 'lperez@puyo.gob.ec'
                },
                {
                    'nombres': 'Iv√°n Ramiro',
                    'apellidos': 'Rodr√≠guez Villavicencio',
                    'cargo': 'Concejal Principal',
                    'email': 'irodriguez@puyo.gob.ec'
                },
                {
                    'nombres': 'An√≠bal Homero',
                    'apellidos': 'Toscano Vargas',
                    'cargo': 'Concejal Principal',
                    'email': 'atoscano@puyo.gob.ec'
                }
            ],
            'funcionarios': [
                {
                    'nombres': 'Mar√≠a Elena',
                    'apellidos': 'V√°squez Castro',
                    'cargo': 'Secretaria General',
                    'email': 'secretaria@puyo.gob.ec'
                },
                {
                    'nombres': 'Carlos Eduardo',
                    'apellidos': 'Morales Rivadeneira',
                    'cargo': 'Director de Planificaci√≥n',
                    'email': 'planificacion@puyo.gob.ec'
                }
            ]
        }
        
        self.temas_sesiones = [
            'Ordenanza de Regulaci√≥n del Comercio Ambulante en el Centro de Puyo',
            'Aprobaci√≥n del Presupuesto Municipal 2025 - Segundo Semestre',
            'Creaci√≥n del Parque Ecol√≥gico R√≠o Pastaza',
            'Declaratoria de Emergencia Vial en el Sector Shell',
            'Reglamento de Turismo Comunitario Ind√≠gena',
            'Plan de Gesti√≥n de Residuos S√≥lidos Cantonal',
            'Aprobaci√≥n de Convenio con Universidad Estatal Amaz√≥nica',
            'Regulaci√≥n de Actividades Mineras en Territorio Cantonal',
            'Fortalecimiento del Sistema de Agua Potable Rural',
            'Creaci√≥n de la Casa de la Cultura Amaz√≥nica',
            'Plan de Contingencia para Temporada Lluviosa 2025',
            'Reglamento de Construcciones Sostenibles'
        ]

    def crear_usuarios(self):
        """Crear usuarios para autoridades municipales"""
        print("üèõÔ∏è Creando usuarios de autoridades municipales...")
        
        usuarios_creados = []
        
        # Crear usuario para el Alcalde
        try:
            alcalde_user, created = User.objects.get_or_create(
                username='sflores',
                defaults={
                    'email': self.autoridades_municipales['alcalde']['email'],
                    'first_name': self.autoridades_municipales['alcalde']['nombres'],
                    'last_name': self.autoridades_municipales['alcalde']['apellidos'],
                    'is_staff': True,
                    'is_active': True
                }
            )
            if created:
                alcalde_user.set_password('Alcalde2025!')
                alcalde_user.save()
                usuarios_creados.append(f"‚úÖ Alcalde: {alcalde_user.get_full_name()}")
            else:
                print(f"‚ÑπÔ∏è Usuario alcalde ya existe: {alcalde_user.get_full_name()}")
        except Exception as e:
            print(f"‚ùå Error creando alcalde: {str(e)[:50]}")

        # Crear usuario para el Secretario de Consejo  
        try:
            secretario_user, created = User.objects.get_or_create(
                username='dandrade',
                defaults={
                    'email': self.autoridades_municipales['secretario_consejo']['email'],
                    'first_name': self.autoridades_municipales['secretario_consejo']['nombres'],
                    'last_name': self.autoridades_municipales['secretario_consejo']['apellidos'],
                    'is_staff': True,
                    'is_active': True
                }
            )
            if created:
                secretario_user.set_password('Secretario2025!')
                secretario_user.save()
                usuarios_creados.append(f"‚úÖ Secretario de Consejo: {secretario_user.get_full_name()}")
            else:
                print(f"‚ÑπÔ∏è Usuario secretario ya existe: {secretario_user.get_full_name()}")
        except Exception as e:
            print(f"‚ùå Error creando secretario: {str(e)[:50]}")

        # Crear usuarios para concejales
        for i, concejal in enumerate(self.autoridades_municipales['concejales']):
            try:
                username = f"concejal{i+1}"
                user, created = User.objects.get_or_create(
                    username=username,
                    defaults={
                        'email': concejal['email'],
                        'first_name': concejal['nombres'],
                        'last_name': concejal['apellidos'],
                        'is_active': True
                    }
                )
                if created:
                    user.set_password('Concejal2025!')
                    user.save()
                    usuarios_creados.append(f"‚úÖ Concejal: {user.get_full_name()}")
            except Exception as e:
                print(f"‚ùå Error creando concejal {i+1}: {str(e)[:50]}")

        # Crear usuarios para funcionarios
        for i, funcionario in enumerate(self.autoridades_municipales['funcionarios']):
            try:
                username = f"funcionario{i+1}"
                user, created = User.objects.get_or_create(
                    username=username,
                    defaults={
                        'email': funcionario['email'],
                        'first_name': funcionario['nombres'],
                        'last_name': funcionario['apellidos'],
                        'is_staff': True,
                        'is_active': True
                    }
                )
                if created:
                    user.set_password('Funcionario2025!')
                    user.save()
                    usuarios_creados.append(f"‚úÖ Funcionario: {user.get_full_name()}")
            except Exception as e:
                print(f"‚ùå Error creando funcionario {i+1}: {str(e)[:50]}")

        print(f"üìä Total usuarios nuevos creados: {len(usuarios_creados)}")
        for usuario in usuarios_creados[:5]:
            print(f"  {usuario}")
        
        return len(usuarios_creados)

    def crear_tipos_reunion(self):
        """Crear tipos de reuni√≥n con campos correctos"""
        print("üìã Creando tipos de reuni√≥n...")
        
        tipos_reunion = [
            {
                'nombre': 'Sesi√≥n Ordinaria',
                'descripcion': 'Sesi√≥n ordinaria del Concejo Municipal de Pastaza',
                'activo': True
            },
            {
                'nombre': 'Sesi√≥n Extraordinaria',
                'descripcion': 'Sesi√≥n extraordinaria por temas urgentes del cant√≥n',
                'activo': True
            },
            {
                'nombre': 'Comisi√≥n Permanente',
                'descripcion': 'Reuni√≥n de comisi√≥n permanente especializada',
                'activo': True
            }
        ]
        
        tipos_creados = 0
        for tipo_data in tipos_reunion:
            try:
                tipo, created = TipoReunion.objects.get_or_create(
                    nombre=tipo_data['nombre'],
                    defaults=tipo_data
                )
                if created:
                    tipos_creados += 1
                    print(f"  ‚úÖ {tipo.nombre}")
            except Exception as e:
                print(f"‚ùå Error creando tipo {tipo_data['nombre']}: {str(e)[:50]}")
        
        print(f"üìä Tipos de reuni√≥n creados: {tipos_creados}")
        return tipos_creados

    def crear_tipos_sesion(self):
        """Crear tipos de sesi√≥n con campos correctos"""
        print("üìã Creando tipos de sesi√≥n...")
        
        tipos_sesion = [
            {
                'nombre': 'Ordinaria',
                'descripcion': 'Sesi√≥n ordinaria mensual del Concejo Municipal',
                'color': '#007bff',
                'icono': 'fas fa-calendar-alt',
                'activo': True
            },
            {
                'nombre': 'Extraordinaria',
                'descripcion': 'Sesi√≥n extraordinaria por temas urgentes',
                'color': '#dc3545',
                'icono': 'fas fa-exclamation-triangle',
                'activo': True
            },
            {
                'nombre': 'Comisi√≥n',
                'descripcion': 'Reuni√≥n de comisi√≥n especializada',
                'color': '#6c757d',
                'icono': 'fas fa-users',
                'activo': True
            }
        ]
        
        tipos_creados = 0
        for tipo_data in tipos_sesion:
            try:
                tipo, created = TipoSesion.objects.get_or_create(
                    nombre=tipo_data['nombre'],
                    defaults=tipo_data
                )
                if created:
                    tipos_creados += 1
                    print(f"  ‚úÖ {tipo.nombre}")
            except Exception as e:
                print(f"‚ùå Error creando tipo sesi√≥n {tipo_data['nombre']}: {str(e)[:50]}")
        
        print(f"üìä Tipos de sesi√≥n creados: {tipos_creados}")
        return tipos_creados

    def crear_estados_acta(self):
        """Crear estados de acta con campos correctos"""
        print("üìã Creando estados de acta...")
        
        estados = [
            {
                'nombre': 'Borrador',
                'descripcion': 'Acta en proceso de elaboraci√≥n',
                'color': '#ffc107',
                'orden': 1,
                'activo': True
            },
            {
                'nombre': 'Revisi√≥n',
                'descripcion': 'Acta en proceso de revisi√≥n',
                'color': '#17a2b8',
                'orden': 2,
                'activo': True
            },
            {
                'nombre': 'Aprobada',
                'descripcion': 'Acta aprobada por el Concejo',
                'color': '#28a745',
                'orden': 3,
                'activo': True
            },
            {
                'nombre': 'Publicada',
                'descripcion': 'Acta publicada para acceso ciudadano',
                'color': '#007bff',
                'orden': 4,
                'activo': True
            }
        ]
        
        estados_creados = 0
        for estado_data in estados:
            try:
                estado, created = EstadoActa.objects.get_or_create(
                    nombre=estado_data['nombre'],
                    defaults=estado_data
                )
                if created:
                    estados_creados += 1
                    print(f"  ‚úÖ {estado.nombre}")
            except Exception as e:
                print(f"‚ùå Error creando estado {estado_data['nombre']}: {str(e)[:50]}")
        
        print(f"üìä Estados de acta creados: {estados_creados}")
        return estados_creados

    def crear_actas_municipales(self):
        """Crear actas municipales realistas"""
        print("üèõÔ∏è Creando actas municipales del Concejo de Pastaza...")
        
        # Obtener objetos necesarios
        try:
            alcalde = User.objects.filter(username='sflores').first()
            secretario_consejo = User.objects.filter(username='dandrade').first()
            tipo_ordinaria = TipoSesion.objects.filter(nombre='Ordinaria').first()
            tipo_extraordinaria = TipoSesion.objects.filter(nombre='Extraordinaria').first()
            estado_publicada = EstadoActa.objects.filter(nombre='Publicada').first()
            estado_borrador = EstadoActa.objects.filter(nombre='Borrador').first()
            
            # Si no existe el secretario de consejo, usar el alcalde
            if not secretario_consejo:
                secretario_consejo = alcalde
            
            if not tipo_ordinaria or not estado_publicada or not alcalde:
                print("‚ùå Error: No se encontraron tipos de sesi√≥n, estados o usuarios")
                return 0
        except Exception as e:
            print(f"‚ùå Error obteniendo objetos necesarios: {str(e)}")
            return 0

        actas_creadas = 0
        fecha_base = datetime.now() - timedelta(days=180)
        
        for i, tema in enumerate(self.temas_sesiones):
            try:
                # Calcular fecha de sesi√≥n
                fecha_sesion = fecha_base + timedelta(days=i*15 + random.randint(-3, 3))
                
                # Determinar tipo y estado
                tipo_sesion = tipo_extraordinaria if 'Emergencia' in tema or 'Urgente' in tema else tipo_ordinaria
                estado = estado_publicada if random.choice([True, True, True, False]) else estado_borrador
                
                # Crear acta municipal con campos correctos
                acta = ActaMunicipal.objects.create(
                    numero_acta=f"ACTA-{2025}-{str(i+1).zfill(3)}",
                    numero_sesion=i+1,
                    titulo=tema,
                    fecha_sesion=fecha_sesion,
                    tipo_sesion=tipo_sesion,
                    estado=estado,
                    resumen=f"Sesi√≥n del Concejo Municipal de Pastaza sobre {tema.lower()}.",
                    contenido=self.generar_contenido_acta(tema, fecha_sesion),
                    orden_del_dia=f"1. Verificaci√≥n del qu√≥rum\n2. {tema}\n3. Varios",
                    acuerdos=f"Se aprob√≥ la propuesta relacionada con {tema.lower()}",
                    acceso='publico',
                    secretario=secretario_consejo,
                    presidente=alcalde,
                    asistentes='Alcalde Segundo Germ√°n Flores Meza, Concejales presentes, Secretario de Consejo Danilo Andrade',
                    ausentes='Ninguno',
                    transcripcion_ia=True,
                    precision_ia=round(random.uniform(85.0, 95.0), 2),
                    tiempo_procesamiento=timedelta(seconds=random.randint(120, 300)),
                    palabras_clave=f"municipio, pastaza, {tema.split()[0].lower()}, concejo",
                    observaciones="Sesi√≥n desarrollada con normalidad seg√∫n reglamento interno",
                    activo=True
                )
                
                # Crear procesamiento de audio asociado
                self.crear_procesamiento_audio_simple(acta)
                
                actas_creadas += 1
                print(f"  ‚úÖ {acta.numero_acta}: {acta.titulo[:50]}...")
                
            except Exception as e:
                print(f"‚ùå Error creando acta {i+1}: {str(e)[:100]}")
                continue

        print(f"üìä Actas municipales creadas: {actas_creadas}")
        return actas_creadas

    def generar_contenido_acta(self, tema, fecha_sesion):
        """Generar contenido realista del acta"""
        return f"""
ACTA DE SESI√ìN DEL CONCEJO MUNICIPAL DEL CANT√ìN PASTAZA

En la ciudad de Puyo, capital del cant√≥n Pastaza, el {fecha_sesion.strftime('%d de %B de %Y')}, siendo las {fecha_sesion.strftime('%H:%M')} horas, se instal√≥ la sesi√≥n del Concejo Municipal bajo la presidencia del se√±or Alcalde Segundo Germ√°n Flores Meza.

TEMA PRINCIPAL: {tema}

DESARROLLO:
El se√±or Alcalde expone el tema principal relacionado con {tema.lower()}, destacando su importancia para el desarrollo sostenible del cant√≥n Pastaza y el bienestar de los ciudadanos de Puyo y las parroquias rurales.

Los se√±ores concejales participaron activamente en el debate, considerando especialmente el impacto en las comunidades ind√≠genas Shuar y Achuar del territorio, as√≠ como en los colonos que habitan la regi√≥n amaz√≥nica.

Se analiz√≥ la propuesta en el marco de las competencias municipales establecidas en el COOTAD y su alineaci√≥n con el Plan de Desarrollo y Ordenamiento Territorial del cant√≥n Pastaza.

RESOLUCI√ìN:
Despu√©s del an√°lisis correspondiente, el Concejo Municipal adopt√≥ las decisiones necesarias, priorizando el desarrollo arm√≥nico entre la conservaci√≥n del patrimonio natural amaz√≥nico y el progreso econ√≥mico de la poblaci√≥n.

La presente acta se elabora en cumplimiento de las disposiciones legales vigentes y del reglamento interno del Concejo Municipal del Cant√≥n Pastaza.

Elaborada por: Danilo Andrade - Secretario de Consejo
Revisada por: Segundo Germ√°n Flores Meza - Alcalde del Cant√≥n Pastaza
"""

    def crear_procesamiento_audio_simple(self, acta):
        """Crear procesamiento de audio simple para el acta"""
        try:
            tipo_reunion = TipoReunion.objects.first()
            if not tipo_reunion:
                return None
                
            estados_posibles = ['completado', 'procesando', 'pendiente']
            estado = random.choices(estados_posibles, weights=[70, 15, 15])[0]
            
            procesamiento = ProcesamientoAudio.objects.create(
                tipo_reunion=tipo_reunion,
                titulo=f"Audio - {acta.titulo}",
                descripcion=f"Grabaci√≥n de la sesi√≥n municipal {acta.numero_acta}",
                estado=estado,
                fecha_inicio=acta.fecha_sesion,
                fecha_completado=acta.fecha_sesion + timedelta(hours=2) if estado == 'completado' else None,
                duracion_original=random.randint(7200, 14400),
                participantes_detallados=[
                    {
                        'nombre': 'Segundo Germ√°n Flores Meza',
                        'cargo': 'Alcalde',
                        'participacion': 'Alta'
                    },
                    {
                        'nombre': 'Danilo Andrade',
                        'cargo': 'Secretario de Consejo',
                        'participacion': 'Media'
                    }
                ],
                metadatos_originales={
                    'formato': 'mp3',
                    'duracion': random.randint(7200, 14400),
                    'ubicacion_grabacion': 'Sal√≥n de Sesiones'
                },
                metadatos_procesamiento={
                    'snr_promedio': round(random.uniform(15.0, 25.0), 2),
                    'modelo_transcripcion': 'whisper-large-v3'
                } if estado == 'completado' else {},
                confidencial=False
            )
            
            return procesamiento
            
        except Exception as e:
            print(f"‚ùå Error creando procesamiento audio: {str(e)[:100]}")
            return None

    def crear_logs_auditoria(self):
        """Crear logs de auditor√≠a con campos correctos"""
        print("üîç Creando registros de auditor√≠a...")
        
        categorias = ['actas', 'audio', 'transcripcion', 'sistema']
        subcategorias = ['creacion', 'edicion', 'consulta', 'publicacion']
        
        logs_creados = 0
        for i in range(25):
            try:
                SistemaLogs.objects.create(
                    timestamp=timezone.now() - timedelta(days=random.randint(1, 30)),
                    nivel='INFO',
                    categoria=random.choice(categorias),
                    subcategoria=random.choice(subcategorias),
                    usuario_id=1,
                    session_id=f'session_{random.randint(1000, 9999)}',
                    ip_address=f"10.0.1.{random.randint(1, 100)}",
                    user_agent='Mozilla/5.0 (Sistema Municipal Pastaza)',
                    mensaje=f"Actividad municipal registrada en el sistema #{i+1}",
                    datos_extra={'municipio': 'Pastaza', 'ubicacion': 'Puyo'},
                    modulo='actas_municipales',
                    url_solicitada=f'/actas/{random.randint(1, 12)}/',
                    metodo_http='GET',
                    tiempo_respuesta_ms=random.randint(100, 500),
                    codigo_respuesta=200
                )
                logs_creados += 1
                if i < 5:  # Mostrar solo los primeros 5
                    print(f"  ‚úÖ Log {i+1}: Actividad municipal registrada")
            except Exception as e:
                print(f"‚ùå Error creando log {i+1}: {str(e)[:50]}")
                continue
                
        print(f"üìä Logs de auditor√≠a creados: {logs_creados}")
        return logs_creados

    def ejecutar_poblado_completo(self):
        """Ejecutar todo el proceso de poblado de datos"""
        print("üöÄ INICIANDO POBLADO COMPLETO DEL MUNICIPIO DE PASTAZA")
        print("üåç GAD Municipal del Cant√≥n Pastaza - Puyo, Ecuador")
        print("=" * 65)
        
        resultados = {}
        
        try:
            resultados['usuarios'] = self.crear_usuarios()
            resultados['tipos_reunion'] = self.crear_tipos_reunion()
            resultados['tipos_sesion'] = self.crear_tipos_sesion()
            resultados['estados_acta'] = self.crear_estados_acta()
            resultados['actas'] = self.crear_actas_municipales()
            resultados['logs'] = self.crear_logs_auditoria()
            
            print("\n" + "=" * 65)
            print("‚úÖ POBLADO COMPLETADO EXITOSAMENTE")
            print("=" * 65)
            print(f"üë• Usuarios nuevos creados: {resultados['usuarios']}")
            print(f"üìã Tipos de reuni√≥n: {resultados['tipos_reunion']}")
            print(f"üìã Tipos de sesi√≥n: {resultados['tipos_sesion']}")
            print(f"üìä Estados de acta: {resultados['estados_acta']}")
            print(f"üèõÔ∏è Actas municipales: {resultados['actas']}")
            print(f"üîç Logs de auditor√≠a: {resultados['logs']}")
            print("\nüéâ EL SISTEMA EST√Å LISTO CON DATOS REALISTAS!")
            print("üèõÔ∏è Municipio: GAD Municipal del Cant√≥n Pastaza")
            print("üåê Sitio web: https://puyo.gob.ec/")
            print("üì± Facebook: https://www.facebook.com/GADMPastaza")
            print("üå≥ Regi√≥n: Amaz√≥nica Ecuatoriana")
            
        except Exception as e:
            print(f"‚ùå Error durante el poblado: {str(e)}")
            import traceback
            traceback.print_exc()
            
        return resultados


if __name__ == '__main__':
    poblador = PobladorMunicipioPastazaCorregido()
    resultados = poblador.ejecutar_poblado_completo()