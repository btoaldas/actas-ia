"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os, random, string
from pathlib import Path
from dotenv import load_dotenv
from str2bool import str2bool


load_dotenv()  # take environment variables from .env.

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')
if not SECRET_KEY:
    SECRET_KEY = ''.join(random.choice( string.ascii_lowercase  ) for i in range( 32 ))

# Enable/Disable DEBUG Mode
DEBUG = str2bool(os.environ.get('DEBUG'))
#print(' DEBUG -> ' + str(DEBUG) ) 

# Docker HOST
ALLOWED_HOSTS = ['*']

# Add here your deployment HOSTS
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:8000', 
    'http://localhost:5085', 
    'http://127.0.0.1:8000', 
    'http://127.0.0.1:5085',
    'http://puyo.gob.ec',
    'https://puyo.gob.ec'
]

#Render Context
RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME:    
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

# Application definition

INSTALLED_APPS = [
    "jazzmin",
    "webpack_loader",
    "frontend",

    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",  # Requerido para allauth

    # OAuth y autenticación social
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.github',
    'allauth.socialaccount.providers.google',

    "apps.pages",
    'apps.dyn_dt',
    'apps.dyn_api',
    'apps.charts',
    'apps.file_manager',
    'apps.tasks',
    'apps.users',
    'apps.react',
    'apps.auditoria',
    'apps.config_system',

    'rest_framework',
    'debug_toolbar',
    'django_quill',
    'celery',
    'django_celery_results',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    "django.contrib.sessions.middleware.SessionMiddleware",
    "apps.auditoria.session_middleware.AdvancedSessionMiddleware",  # Middleware de sesiones avanzado
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "allauth.account.middleware.AccountMiddleware",  # Middleware requerido para allauth
    "helpers.auditoria_middleware.AuditoriaMiddleware",  # Middleware de auditoría personalizado
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

HOME_TEMPLATES = os.path.join(BASE_DIR, 'templates')

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [HOME_TEMPLATES],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                # "apps.common.context_processors.get_settings",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DB_ENGINE   = os.getenv('DB_ENGINE'   , None)
DB_USERNAME = os.getenv('DB_USERNAME' , None)
DB_PASS     = os.getenv('DB_PASS'     , None)
DB_HOST     = os.getenv('DB_HOST'     , None)
DB_PORT     = os.getenv('DB_PORT'     , None)
DB_NAME     = os.getenv('DB_NAME'     , None)

if DB_ENGINE and DB_NAME and DB_USERNAME:
    DATABASES = { 
      'default': {
        'ENGINE'  : 'django.db.backends.' + DB_ENGINE, 
        'NAME'    : DB_NAME,
        'USER'    : DB_USERNAME,
        'PASSWORD': DB_PASS,
        'HOST'    : DB_HOST,
        'PORT'    : DB_PORT,
        }, 
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': 'db.sqlite3',
        }
    }

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale'),
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR,'static'),
]

MEDIA_URL = 'media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
#if not DEBUG:
#    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

# ### Async Tasks (Celery) Settings ###


CELERY_SCRIPTS_DIR        = os.path.join(BASE_DIR, "tasks_scripts" )

CELERY_LOGS_URL           = "/tasks_logs/"
CELERY_LOGS_DIR           = os.path.join(BASE_DIR, "tasks_logs"    )

CELERY_BROKER_URL         = os.environ.get("REDIS_URL", "redis://redis:6379/0")
CELERY_RESULT_BACKEND     = os.environ.get("REDIS_URL", "redis://redis:6379/0")

CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT    = 30 * 60
CELERY_CACHE_BACKEND      = "django-cache"
CELERY_RESULT_BACKEND     = "django-db"
CELERY_RESULT_EXTENDED    = True
CELERY_RESULT_EXPIRES     = 60*60*24*30 # Results expire after 1 month
CELERY_ACCEPT_CONTENT     = ["json"]
CELERY_TASK_SERIALIZER    = 'json'
CELERY_RESULT_SERIALIZER  = 'json'
########################################

X_FRAME_OPTIONS = 'SAMEORIGIN'

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGIN_REDIRECT_URL = '/'
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

DIR_GENERATOR_TMPL = os.path.join('templates', 'generator')

# ### DYNAMIC_DATATB Settings ###
DYNAMIC_DATATB = {
    # SLUG -> Import_PATH 
    'product'  : "apps.pages.models.Product",
}
########################################

# ### CONFIGURACIONES ESPECÍFICAS DEL MUNICIPIO DE PASTAZA ###

# Información del municipio
MUNICIPIO_CONFIG = {
    'nombre': os.environ.get('MUNICIPIO_NAME', 'Municipio de Pastaza'),
    'dominio': os.environ.get('MUNICIPIO_DOMAIN', 'puyo.gob.ec'),
    'direccion': 'Puyo, Provincia de Pastaza, Ecuador',
    'telefono': '+593-3-288-5432',
    'email': 'info@puyo.gob.ec',
}

# Configuración para procesamiento de audio y transcripción
ACTAS_CONFIG = {
    'max_audio_size_mb': 500,  # Tamaño máximo de archivo de audio en MB
    'audio_formats': ['.mp3', '.wav', '.m4a', '.ogg'],
    'whisper_model': 'medium',  # Modelo de Whisper a usar
    'idioma_principal': 'es',   # Idioma español
    'directorio_audios': 'media/audios/',
    'directorio_transcripciones': 'media/transcripciones/',
    'directorio_actas': 'media/actas/',
    'directorio_pdfs': 'media/pdfs/',
}

# Configuración de APIs de IA
IA_CONFIG = {
    'openai_api_key': os.environ.get('OPENAI_API_KEY', ''),
    'deepseek_api_key': os.environ.get('DEEPSEEK_API_KEY', ''),
    'anthropic_api_key': os.environ.get('ANTHROPIC_API_KEY', ''),
    'ollama_url': os.environ.get('OLLAMA_URL', 'http://localhost:11434'),
    'provider_por_defecto': 'openai',  # openai, deepseek, anthropic, ollama
}

# Configuración de correo electrónico
EMAIL_CONFIG = {
    'host': os.environ.get('EMAIL_HOST', 'smtp.gmail.com'),
    'port': int(os.environ.get('EMAIL_PORT', 587)),
    'use_tls': str2bool(os.environ.get('EMAIL_USE_TLS', 'True')),
    'host_user': os.environ.get('EMAIL_HOST_USER', ''),
    'host_password': os.environ.get('EMAIL_HOST_PASSWORD', ''),
    'from_email': f"noreply@{os.environ.get('MUNICIPIO_DOMAIN', 'puyo.gob.ec')}",
}

# Configurar email backend
if EMAIL_CONFIG['host_user'] and EMAIL_CONFIG['host_password']:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = EMAIL_CONFIG['host']
    EMAIL_PORT = EMAIL_CONFIG['port']
    EMAIL_USE_TLS = EMAIL_CONFIG['use_tls']
    EMAIL_HOST_USER = EMAIL_CONFIG['host_user']
    EMAIL_HOST_PASSWORD = EMAIL_CONFIG['host_password']
    DEFAULT_FROM_EMAIL = EMAIL_CONFIG['from_email']
else:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Configuración de internacionalización en español
LANGUAGE_CODE = 'es-ec'
TIME_ZONE = 'America/Guayaquil'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Configuración de archivos estáticos y media
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Configuración de logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'actas_municipales': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# ### CONFIGURACIÓN DE AUTENTICACIÓN Y OAUTH ###

# Site ID requerido para django-allauth
SITE_ID = 1

# Configuración de autenticación
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  # Backend por defecto
    'allauth.account.auth_backends.AuthenticationBackend',  # Backend de allauth
]

# Configuración de django-allauth
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'optional'  # 'mandatory' para producción
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
ACCOUNT_LOGIN_ATTEMPTS_LIMIT = 5
ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT = 300  # 5 minutos
ACCOUNT_LOGOUT_REDIRECT_URL = '/'
ACCOUNT_SESSION_REMEMBER = True

# URLs de redirección después del login
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Configuración de proveedores sociales
SOCIALACCOUNT_PROVIDERS = {
    'github': {
        'APP': {
            'client_id': os.environ.get('GITHUB_CLIENT_ID', ''),
            'secret': os.environ.get('GITHUB_CLIENT_SECRET', ''),
        },
        'SCOPE': [
            'user:email',
        ],
    },
    'google': {
        'APP': {
            'client_id': os.environ.get('GOOGLE_CLIENT_ID', ''),
            'secret': os.environ.get('GOOGLE_CLIENT_SECRET', ''),
        },
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    }
}

# Configuración adicional para OAuth
SOCIALACCOUNT_LOGIN_ON_GET = True
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_EMAIL_REQUIRED = True
SOCIALACCOUNT_EMAIL_VERIFICATION = 'optional'

# ### CONFIGURACIÓN DE CELERY (YA EXISTENTE MEJORADA) ###

# Configuración de Celery para el Municipio de Pastaza
CELERY_TASK_ALWAYS_EAGER = False  # False para usar Redis, True para testing
CELERY_TASK_EAGER_PROPAGATES = True
CELERY_WORKER_SEND_TASK_EVENTS = True
CELERY_TASK_SEND_SENT_EVENT = True

# Configuración de rutas para tareas Celery
CELERY_ROUTES = {
    'apps.tasks.tasks.procesar_audio_acta': {'queue': 'audio_processing'},
    'apps.tasks.tasks.generar_transcripcion': {'queue': 'transcription'},
    'apps.tasks.tasks.enviar_notificacion_email': {'queue': 'notifications'},
    'apps.tasks.tasks.generar_pdf_acta': {'queue': 'pdf_generation'},
}

# ### CONFIGURACIÓN PARA RENDER (DEPLOYMENT) ###

# Configuración específica para deployment en Render
if RENDER_EXTERNAL_HOSTNAME:
    # Configuraciones de producción para Render
    DEBUG = False
    ALLOWED_HOSTS = [RENDER_EXTERNAL_HOSTNAME, 'puyo.gob.ec', 'www.puyo.gob.ec']
    
    # Configuración de base de datos para Render (PostgreSQL)
    DATABASES['default'] = {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('DATABASE_NAME', 'actas_municipales_pastaza'),
        'USER': os.environ.get('DATABASE_USER', 'admin_actas'),
        'PASSWORD': os.environ.get('DATABASE_PASSWORD', ''),
        'HOST': os.environ.get('DATABASE_HOST', 'localhost'),
        'PORT': os.environ.get('DATABASE_PORT', '5432'),
    }
    
    # Configuración de Redis para Render
    CELERY_BROKER_URL = os.environ.get('REDIS_URL', 'redis://localhost:6379/0')
    CELERY_RESULT_BACKEND = os.environ.get('REDIS_URL', 'redis://localhost:6379/0')
    
    # Configuración de email para producción
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')
    EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))
    EMAIL_USE_TLS = True
    EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')
    EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
    
    # Configuración de archivos estáticos para producción
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
    
    # Configuración de seguridad para producción
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_REDIRECT_EXEMPT = []
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    
    # Logging para producción
    LOGGING['handlers']['file'] = {
        'level': 'INFO',
        'class': 'logging.FileHandler',
        'filename': '/tmp/actas_municipales.log',
        'formatter': 'verbose',
    }
    LOGGING['loggers']['actas_municipales']['handlers'] = ['file', 'console']

# Syntax: URI -> Import_PATH
DYNAMIC_API = {
    # SLUG -> Import_PATH 
    'product'  : "apps.pages.models.Product",
}

# ============================================================================
# CONFIGURACIÓN DE LOGGING Y AUDITORÍA
# ============================================================================

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'audit': {
            'format': '{asctime} | {levelname} | {name} | {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file_general': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'actas_general.log'),
            'maxBytes': 1024*1024*15,  # 15MB
            'backupCount': 10,
            'formatter': 'verbose',
        },
        'file_audit': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'auditoria.log'),
            'maxBytes': 1024*1024*25,  # 25MB
            'backupCount': 15,
            'formatter': 'audit',
        },
        'file_celery': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'celery_audit.log'),
            'maxBytes': 1024*1024*20,  # 20MB
            'backupCount': 12,
            'formatter': 'verbose',
        },
        'file_frontend': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'frontend_audit.log'),
            'maxBytes': 1024*1024*10,  # 10MB
            'backupCount': 8,
            'formatter': 'audit',
        },
        'file_errors': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'errores_sistema.log'),
            'maxBytes': 1024*1024*30,  # 30MB
            'backupCount': 20,
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file_general'],
            'level': 'INFO',
            'propagate': True,
        },
        'auditoria': {
            'handlers': ['file_audit', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        'celery_audit': {
            'handlers': ['file_celery', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        'frontend_audit': {
            'handlers': ['file_frontend', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        'apps': {
            'handlers': ['file_general', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        # Logger especial para errores del sistema
        'sistema_errores': {
            'handlers': ['file_errors', 'console'],
            'level': 'ERROR',
            'propagate': False,
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'WARNING',
    },
}

# Crear directorio de logs si no existe
import os
logs_dir = os.path.join(BASE_DIR, 'logs')
os.makedirs(logs_dir, exist_ok=True)

# =============================================================================
# CONFIGURACIÓN MEJORADA DE SESIONES Y COOKIES
# =============================================================================

# Configuración de sesiones
SESSION_ENGINE = 'django.contrib.sessions.backends.db'  # Usar BD en lugar de cache
SESSION_COOKIE_NAME = 'actas_sessionid'  # Nombre personalizado
SESSION_COOKIE_AGE = 7200  # 2 horas (7200 segundos)
SESSION_SAVE_EVERY_REQUEST = True  # Guardar en cada request
SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # No expirar al cerrar navegador por defecto

# Configuración de cookies de sesión
if not DEBUG:
    SESSION_COOKIE_SECURE = True  # True en producción con HTTPS
    CSRF_COOKIE_SECURE = True  # True en producción
else:
    SESSION_COOKIE_SECURE = False  # False en desarrollo
    CSRF_COOKIE_SECURE = False  # False en desarrollo

SESSION_COOKIE_HTTPONLY = True  # Prevenir acceso desde JavaScript
SESSION_COOKIE_SAMESITE = 'Lax'  # Protección CSRF

# Configuración de cookies CSRF
CSRF_COOKIE_NAME = 'actas_csrftoken'
CSRF_COOKIE_AGE = 31449600  # 1 año
CSRF_COOKIE_HTTPONLY = False  # Debe ser False para que JS pueda leerlo
CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_USE_SESSIONS = True  # Usar sesiones para almacenar token CSRF

# Configuración adicional de seguridad
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# ============================================================================
# CONFIGURACIÓN DE AUDITORÍA PERSONALIZADA
# ============================================================================

# Configuración específica para el sistema de auditoría
AUDITORIA_CONFIG = {
    'TRACK_USER_AGENTS': True,
    'TRACK_IP_ADDRESSES': True,
    'TRACK_SESSION_DATA': True,
    'TRACK_FORM_DATA': True,
    'CLEAN_SENSITIVE_DATA': True,
    'LOG_RESPONSE_TIMES': True,
    'LOG_ERROR_DETAILS': True,
    'BATCH_SIZE_FRONTEND': 10,
    'FLUSH_INTERVAL_FRONTEND': 5000,  # 5 segundos
    'MAX_QUEUE_SIZE_FRONTEND': 100,
    'RETENTION_DAYS_NAVIGATION': 60,  # 2 meses
    'RETENTION_DAYS_SYSTEM_LOGS': 90,  # 3 meses  
    'RETENTION_DAYS_ACCESS_LOGS': 180,  # 6 meses
    'RETENTION_DAYS_AUDIT_CHANGES': 365,  # 1 año
    'RETENTION_DAYS_ERROR_LOGS': 180,  # 6 meses
}

# Lista de campos sensibles que no se deben loggear
SENSITIVE_FIELDS = [
    'password', 'password1', 'password2', 'old_password', 'new_password',
    'csrfmiddlewaretoken', 'api_key', 'secret', 'token', 'access_token',
    'refresh_token', 'credit_card', 'ssn', 'social_security', 'pin',
    'cedula', 'numero_cedula', 'ruc', 'numero_cuenta'
]

# URLs que no deben ser trackeadas (para evitar spam de logs)
EXCLUDE_URLS_FROM_TRACKING = [
    '/static/',
    '/media/',
    '/favicon.ico',
    '/robots.txt',
    '/sitemap.xml',
    '/admin/jsi18n/',
    '/api/frontend-logs/',  # Evitar recursión
]

# Configuración para logging de performance
PERFORMANCE_MONITORING = {
    'SLOW_REQUEST_THRESHOLD_MS': 1000,  # Requests > 1 segundo se consideran lentas
    'VERY_SLOW_REQUEST_THRESHOLD_MS': 5000,  # Requests > 5 segundos se consideran muy lentas
    'TRACK_DB_QUERIES': True,
    'TRACK_CACHE_HITS': True,
    'TRACK_MEMORY_USAGE': False,  # Desactivado por defecto, puede ser pesado
}

########################################