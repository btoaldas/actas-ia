#!/usr/bin/env python
"""
Poblador completo de datos realistas para el Municipio de Pastaza
Genera informaci√≥n completa de autoridades, sesiones, audio, transcripciones y actas
Basado en informaci√≥n real del GAD Municipal del Cant√≥n Pastaza
"""

import os
import sys
import django
import random
from datetime import datetime, timedelta
from decimal import Decimal

# Configurar Django
sys.path.append('/app')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from django.contrib.auth.models import User
from django.utils import timezone
from apps.pages.models import (
    TipoSesion, EstadoActa, ActaMunicipal, 
    VisualizacionActa, DescargaActa
)
from apps.audio_processing.models import TipoReunion, ProcesamientoAudio
from apps.transcripcion.models import Transcripcion, ConfiguracionTranscripcion
from apps.auditoria.models import SistemaLogs
import json


class PobladorMunicipioPastaza:
    """Poblador de datos realistas del Municipio de Pastaza"""
    
    def __init__(self):
        self.autoridades_municipales = {
            'alcalde': {
                'nombres': 'Segundo Germ√°n',
                'apellidos': 'Flores Meza',
                'cargo': 'Alcalde',
                'email': 'alcalde@puyo.gob.ec'
            },
            'concejales': [
                {
                    'nombres': 'Roosevelt Wilmer',
                    'apellidos': 'G√≥mez Arias',
                    'cargo': 'Concejal Principal',
                    'email': 'rgomez@puyo.gob.ec'
                },
                {
                    'nombres': 'Luis Fernando',
                    'apellidos': 'Guevara Pab√≥n',
                    'cargo': 'Concejal Principal',
                    'email': 'lguevara@puyo.gob.ec'
                },
                {
                    'nombres': 'M√≥nica Gabriela',
                    'apellidos': 'Meza Bracho',
                    'cargo': 'Concejal Principal',
                    'email': 'mmeza@puyo.gob.ec'
                },
                {
                    'nombres': 'Jenny Judith',
                    'apellidos': 'Moncayo Peaza',
                    'cargo': 'Concejal Principal',
                    'email': 'jmoncayo@puyo.gob.ec'
                },
                {
                    'nombres': 'Laura Marisol',
                    'apellidos': 'P√©rez Heredia',
                    'cargo': 'Concejal Principal',
                    'email': 'lperez@puyo.gob.ec'
                },
                {
                    'nombres': 'Iv√°n Ramiro',
                    'apellidos': 'Rodr√≠guez Villavicencio',
                    'cargo': 'Concejal Principal',
                    'email': 'irodriguez@puyo.gob.ec'
                },
                {
                    'nombres': 'An√≠bal Homero',
                    'apellidos': 'Toscano Vargas',
                    'cargo': 'Concejal Principal',
                    'email': 'atoscano@puyo.gob.ec'
                }
            ],
            'funcionarios': [
                {
                    'nombres': 'Mar√≠a Elena',
                    'apellidos': 'V√°squez Castro',
                    'cargo': 'Secretaria General',
                    'email': 'secretaria@puyo.gob.ec'
                },
                {
                    'nombres': 'Carlos Eduardo',
                    'apellidos': 'Morales Rivadeneira',
                    'cargo': 'Director de Planificaci√≥n',
                    'email': 'planificacion@puyo.gob.ec'
                },
                {
                    'nombres': 'Ana Cristina',
                    'apellidos': 'Salazar Mendoza',
                    'cargo': 'Directora Financiera',
                    'email': 'financiero@puyo.gob.ec'
                }
            ]
        }
        
        self.temas_sesiones = [
            {
                'titulo': 'Ordenanza de Regulaci√≥n del Comercio Ambulante en el Centro de Puyo',
                'descripcion': 'Debate sobre la nueva normativa para regular el comercio informal en el centro hist√≥rico de la ciudad.',
                'tipo': 'ordinaria',
                'ordenanza': 'ORD-2025-001'
            },
            {
                'titulo': 'Aprobaci√≥n del Presupuesto Municipal 2025 - Segundo Semestre',
                'descripcion': 'An√°lisis y aprobaci√≥n del presupuesto participativo para el segundo semestre del a√±o fiscal.',
                'tipo': 'ordinaria',
                'ordenanza': 'RES-2025-015'
            },
            {
                'titulo': 'Creaci√≥n del Parque Ecol√≥gico R√≠o Pastaza',
                'descripcion': 'Propuesta para la creaci√≥n de un parque ecol√≥gico en las riberas del r√≠o Pastaza para conservaci√≥n.',
                'tipo': 'extraordinaria',
                'ordenanza': 'ORD-2025-002'
            },
            {
                'titulo': 'Declaratoria de Emergencia Vial en el Sector Shell',
                'descripcion': 'Declaratoria de emergencia para reparaci√≥n de la v√≠a Shell-Mera por deslizamientos.',
                'tipo': 'extraordinaria',
                'ordenanza': 'RES-2025-016'
            },
            {
                'titulo': 'Reglamento de Turismo Comunitario Ind√≠gena',
                'descripcion': 'Normativa para fortalecer el turismo comunitario en las nacionalidades Shuar y Achuar.',
                'tipo': 'ordinaria',
                'ordenanza': 'ORD-2025-003'
            },
            {
                'titulo': 'Plan de Gesti√≥n de Residuos S√≥lidos Cantonal',
                'descripcion': 'Implementaci√≥n del nuevo plan de manejo integral de residuos s√≥lidos para todo el cant√≥n.',
                'tipo': 'ordinaria',
                'ordenanza': 'RES-2025-017'
            },
            {
                'titulo': 'Aprobaci√≥n de Convenio con Universidad Estatal Amaz√≥nica',
                'descripcion': 'Convenio de cooperaci√≥n t√©cnica y acad√©mica con la UEA para proyectos de desarrollo.',
                'tipo': 'ordinaria',
                'ordenanza': 'CON-2025-005'
            },
            {
                'titulo': 'Regulaci√≥n de Actividades Mineras en Territorio Cantonal',
                'descripcion': 'Establecimiento de normativas para control de actividades mineras y protecci√≥n ambiental.',
                'tipo': 'extraordinaria',
                'ordenanza': 'ORD-2025-004'
            },
            {
                'titulo': 'Fortalecimiento del Sistema de Agua Potable Rural',
                'descripcion': 'Proyecto de mejoramiento del servicio de agua potable para comunidades rurales del cant√≥n.',
                'tipo': 'ordinaria',
                'ordenanza': 'RES-2025-018'
            },
            {
                'titulo': 'Creaci√≥n de la Casa de la Cultura Amaz√≥nica',
                'descripcion': 'Establecimiento de espacio cultural para preservaci√≥n y difusi√≥n de la cultura amaz√≥nica.',
                'tipo': 'ordinaria',
                'ordenanza': 'ORD-2025-005'
            },
            {
                'titulo': 'Plan de Contingencia para Temporada Lluviosa 2025',
                'descripcion': 'Medidas preventivas y de respuesta ante emergencias por precipitaciones extremas.',
                'tipo': 'extraordinaria',
                'ordenanza': 'RES-2025-019'
            },
            {
                'titulo': 'Reglamento de Construcciones Sostenibles',
                'descripcion': 'Normativa para promover construcciones eco-amigables y arquitectura bioclim√°tica.',
                'tipo': 'ordinaria',
                'ordenanza': 'ORD-2025-006'
            }
        ]

    def crear_usuarios(self):
        """Crear usuarios para autoridades municipales"""
        print("üèõÔ∏è Creando usuarios de autoridades municipales...")
        
        usuarios_creados = []
        
        # Crear usuario para el Alcalde
        try:
            alcalde_user = User.objects.create_user(
                username='sflores',
                email=self.autoridades_municipales['alcalde']['email'],
                first_name=self.autoridades_municipales['alcalde']['nombres'],
                last_name=self.autoridades_municipales['alcalde']['apellidos'],
                is_staff=True,
                is_active=True
            )
            alcalde_user.set_password('Alcalde2025!')
            alcalde_user.save()
            usuarios_creados.append(f"‚úÖ Alcalde: {alcalde_user.get_full_name()}")
        except:
            print("‚ÑπÔ∏è Usuario alcalde ya existe")

        # Crear usuarios para concejales
        for i, concejal in enumerate(self.autoridades_municipales['concejales']):
            try:
                username = f"concejal{i+1}"
                user = User.objects.create_user(
                    username=username,
                    email=concejal['email'],
                    first_name=concejal['nombres'],
                    last_name=concejal['apellidos'],
                    is_active=True
                )
                user.set_password('Concejal2025!')
                user.save()
                usuarios_creados.append(f"‚úÖ Concejal: {user.get_full_name()}")
            except:
                print(f"‚ÑπÔ∏è Usuario {concejal['apellidos']} ya existe")

        # Crear usuarios para funcionarios
        for i, funcionario in enumerate(self.autoridades_municipales['funcionarios']):
            try:
                username = f"funcionario{i+1}"
                user = User.objects.create_user(
                    username=username,
                    email=funcionario['email'],
                    first_name=funcionario['nombres'],
                    last_name=funcionario['apellidos'],
                    is_staff=True,
                    is_active=True
                )
                user.set_password('Funcionario2025!')
                user.save()
                usuarios_creados.append(f"‚úÖ Funcionario: {user.get_full_name()}")
            except:
                print(f"‚ÑπÔ∏è Usuario {funcionario['apellidos']} ya existe")

        print(f"üìä Total usuarios creados: {len(usuarios_creados)}")
        for usuario in usuarios_creados[:5]:  # Mostrar solo los primeros 5
            print(f"  {usuario}")
        
        return len(usuarios_creados)

    def crear_tipos_reunion(self):
        """Crear tipos de reuni√≥n municipales"""
        print("üìã Creando tipos de reuni√≥n...")
        
        tipos_reunion = [
            {
                'nombre': 'Sesi√≥n Ordinaria',
                'descripcion': 'Sesi√≥n ordinaria del Concejo Municipal de Pastaza',
                'requiere_quorum': True,
                'es_publica': True
            },
            {
                'nombre': 'Sesi√≥n Extraordinaria',
                'descripcion': 'Sesi√≥n extraordinaria por temas urgentes del cant√≥n',
                'requiere_quorum': True,
                'es_publica': True
            },
            {
                'nombre': 'Comisi√≥n Permanente',
                'descripcion': 'Reuni√≥n de comisi√≥n permanente especializada',
                'requiere_quorum': False,
                'es_publica': False
            },
            {
                'nombre': 'Mesa de Trabajo',
                'descripcion': 'Mesa t√©cnica de trabajo con funcionarios municipales',
                'requiere_quorum': False,
                'es_publica': False
            }
        ]
        
        tipos_creados = 0
        for tipo_data in tipos_reunion:
            tipo, created = TipoReunion.objects.get_or_create(
                nombre=tipo_data['nombre'],
                defaults=tipo_data
            )
            if created:
                tipos_creados += 1
                print(f"  ‚úÖ {tipo.nombre}")
        
        print(f"üìä Tipos de reuni√≥n creados: {tipos_creados}")
        return tipos_creados

    def crear_sesiones_municipales(self):
        """Crear sesiones municipales realistas"""
        print("üèõÔ∏è Creando sesiones municipales del Concejo de Pastaza...")
        
        # Obtener usuarios y tipos
        alcalde = User.objects.filter(username='sflores').first()
        secretaria = User.objects.filter(first_name='Mar√≠a Elena').first()
        tipo_ordinaria = TipoReunion.objects.filter(nombre='Sesi√≥n Ordinaria').first()
        tipo_extraordinaria = TipoReunion.objects.filter(nombre='Sesi√≥n Extraordinaria').first()
        
        if not alcalde or not tipo_ordinaria:
            print("‚ùå Error: No se encontraron usuarios o tipos de reuni√≥n necesarios")
            return 0

        sesiones_creadas = 0
        fecha_base = datetime.now() - timedelta(days=180)  # Empezar hace 6 meses
        
        for i, tema in enumerate(self.temas_sesiones):
            # Calcular fecha de sesi√≥n (cada 15 d√≠as aproximadamente)
            fecha_sesion = fecha_base + timedelta(days=i*15 + random.randint(-3, 3))
            
            # Determinar tipo de sesi√≥n
            tipo_reunion = tipo_extraordinaria if tema['tipo'] == 'extraordinaria' else tipo_ordinaria
            
            # Crear acta municipal
            acta = ActaMunicipal.objects.create(
                numero_acta=f"ACTA-{2025}-{str(i+1).zfill(3)}",
                fecha_sesion=fecha_sesion,
                tipo_sesion=tipo_reunion,
                titulo=tema['titulo'],
                descripcion_breve=tema['descripcion'],
                ubicacion='Sal√≥n de Sesiones del GAD Municipal - Puyo, Pastaza',
                presidida_por=alcalde,
                secretario_acta=secretaria or alcalde,
                estado='publicada' if random.choice([True, True, True, False]) else 'borrador',
                es_publica=True,
                acceso_publico='publico',
                confidencial=False,
                metadata_adicional={
                    'ordenanza_numero': tema.get('ordenanza', ''),
                    'ciudad': 'Puyo',
                    'canton': 'Pastaza',
                    'provincia': 'Pastaza',
                    'region': 'Amaz√≥nica',
                    'quorum_minimo': 5,
                    'duracion_estimada': random.randint(120, 240)
                }
            )
            
            # Crear participantes (autoridades municipales)
            self.crear_participantes_sesion(acta)
            
            # Crear procesamiento de audio
            self.crear_procesamiento_audio(acta)
            
            # Crear transcripci√≥n
            self.crear_transcripcion_completa(acta)
            
            sesiones_creadas += 1
            print(f"  ‚úÖ {acta.numero_acta}: {acta.titulo[:50]}...")

        print(f"üìä Sesiones municipales creadas: {sesiones_creadas}")
        return sesiones_creadas

    def crear_participantes_sesion(self, acta):
        """Crear participantes para una sesi√≥n"""
        # Alcalde siempre presente
        alcalde = User.objects.filter(username='sflores').first()
        if alcalde:
            ParticipanteReunion.objects.create(
                acta=acta,
                nombre_completo=f"{alcalde.first_name} {alcalde.last_name}",
                cargo='Alcalde del GAD Municipal del Cant√≥n Pastaza',
                rol_participacion='presidente',
                presente=True,
                observaciones='Preside la sesi√≥n'
            )

        # Concejales (entre 5-7 presentes)
        concejales_usuarios = User.objects.filter(username__startswith='concejal')
        num_presentes = random.randint(5, min(7, concejales_usuarios.count()))
        
        for user in concejales_usuarios[:num_presentes]:
            ParticipanteReunion.objects.create(
                acta=acta,
                nombre_completo=f"{user.first_name} {user.last_name}",
                cargo='Concejal Principal',
                rol_participacion='concejal',
                presente=True,
                observaciones='Participaci√≥n activa en el debate'
            )

        # Funcionarios municipales
        funcionarios = User.objects.filter(username__startswith='funcionario')
        for user in funcionarios[:2]:  # M√°ximo 2 funcionarios por sesi√≥n
            ParticipanteReunion.objects.create(
                acta=acta,
                nombre_completo=f"{user.first_name} {user.last_name}",
                cargo=random.choice(['Secretario General', 'Director de Planificaci√≥n', 'Director Financiero']),
                rol_participacion='funcionario',
                presente=True,
                observaciones='Soporte t√©cnico y administrativo'
            )

    def crear_procesamiento_audio(self, acta):
        """Crear registro de procesamiento de audio para la sesi√≥n"""
        estados_posibles = ['completado', 'procesando', 'error', 'pendiente']
        estado = random.choices(
            estados_posibles, 
            weights=[70, 10, 5, 15]  # 70% completado, 10% procesando, etc.
        )[0]
        
        procesamiento = ProcesamientoAudio.objects.create(
            tipo_reunion=acta.tipo_sesion,
            titulo=f"Audio - {acta.titulo}",
            descripcion=f"Grabaci√≥n de la sesi√≥n municipal {acta.numero_acta}",
            estado=estado,
            fecha_inicio=acta.fecha_sesion,
            fecha_completado=acta.fecha_sesion + timedelta(hours=2) if estado == 'completado' else None,
            duracion_original=random.randint(7200, 14400),  # Entre 2-4 horas
            ubicacion=acta.ubicacion,
            participantes_detallados=[
                {
                    'nombre': 'Segundo Germ√°n Flores Meza',
                    'cargo': 'Alcalde',
                    'tiempo_participacion': random.randint(1800, 3600)
                },
                {
                    'nombre': 'Roosevelt Wilmer G√≥mez Arias',
                    'cargo': 'Concejal Principal',
                    'tiempo_participacion': random.randint(600, 1800)
                },
                {
                    'nombre': 'Luis Fernando Guevara Pab√≥n',
                    'cargo': 'Concejal Principal',
                    'tiempo_participacion': random.randint(600, 1800)
                }
            ],
            metadatos_originales={
                'formato': 'mp3',
                'bitrate': 128,
                'sample_rate': 44100,
                'canales': 2,
                'dispositivo_grabacion': 'Sistema de Audio Municipal',
                'ubicacion_grabacion': 'Sal√≥n de Sesiones'
            },
            metadatos_procesamiento={
                'snr_promedio': round(random.uniform(15.0, 25.0), 2),
                'nivel_ruido': round(random.uniform(0.1, 0.3), 3),
                'modelo_transcripcion': 'whisper-large-v3',
                'modelo_diarizacion': 'pyannote-v3',
                'tiempo_procesamiento': random.randint(300, 900)
            } if estado == 'completado' else {},
            confidencial=False,
            acta_generada=acta if estado == 'completado' else None
        )
        
        return procesamiento

    def crear_transcripcion_completa(self, acta):
        """Crear transcripci√≥n completa para la sesi√≥n"""
        procesamiento = ProcesamientoAudio.objects.filter(acta_generada=acta).first()
        
        if not procesamiento or procesamiento.estado != 'completado':
            return None

        # Contenido realista de sesi√≥n municipal
        contenido_sesion = self.generar_contenido_sesion_municipal(acta)
        
        transcripcion = TranscripcionCompleta.objects.create(
            procesamiento_audio=procesamiento,
            acta_municipal=acta,
            texto_completo=contenido_sesion['texto_completo'],
            total_speakers=len(contenido_sesion['speakers']),
            duracion_total=procesamiento.duracion_original,
            estado='completada',
            fecha_inicio=acta.fecha_sesion,
            fecha_completado=acta.fecha_sesion + timedelta(hours=1),
            metadatos_diarizacion={
                'speakers_identificados': contenido_sesion['speakers'],
                'intervalos_silencio': random.randint(15, 35),
                'confianza_promedio': round(random.uniform(0.85, 0.95), 3),
                'modelo_utilizado': 'pyannote-v3',
                'tiempo_procesamiento': random.randint(180, 600)
            },
            metadatos_correccion={
                'errores_corregidos': random.randint(5, 25),
                'palabras_agregadas': random.randint(10, 50),
                'nivel_confianza': round(random.uniform(0.9, 0.98), 3),
                'revisor': 'Sistema Autom√°tico IA',
                'fecha_revision': acta.fecha_sesion + timedelta(minutes=30)
            }
        )
        
        # Crear segmentos de transcripci√≥n
        self.crear_segmentos_transcripcion(transcripcion, contenido_sesion)
        
        return transcripcion

    def generar_contenido_sesion_municipal(self, acta):
        """Generar contenido realista de sesi√≥n municipal"""
        
        speakers = [
            'Alcalde Segundo Flores Meza',
            'Concejal Roosevelt G√≥mez',
            'Concejal Luis Guevara',
            'Concejal M√≥nica Meza',
            'Secretaria General',
            'Director de Planificaci√≥n'
        ]
        
        texto_completo = f"""
SESI√ìN {acta.tipo_sesion.nombre.upper()} DEL CONCEJO MUNICIPAL DE PASTAZA
{acta.numero_acta} - {acta.fecha_sesion.strftime('%d de %B de %Y')}

ALCALDE FLORES MEZA: Buenos d√≠as, se√±ores concejales y funcionarios municipales. Se declara instalada la sesi√≥n {acta.tipo_sesion.nombre.lower()} del Concejo Municipal del Cant√≥n Pastaza, siendo las {acta.fecha_sesion.strftime('%H:%M')} horas del d√≠a {acta.fecha_sesion.strftime('%d de %B de %Y')}.

Verificamos el qu√≥rum reglamentario con la presencia de los se√±ores concejales y procederemos con el orden del d√≠a establecido.

SECRETARIA GENERAL: Se√±or Alcalde, se registra la asistencia de los concejales presentes y se da lectura al orden del d√≠a de la presente sesi√≥n.

PUNTO PRINCIPAL: {acta.titulo}

ALCALDE FLORES MEZA: Se√±ores concejales, el tema central de nuestra sesi√≥n de hoy es {acta.titulo.lower()}. {acta.descripcion_breve}

Esta iniciativa es fundamental para el desarrollo sostenible de nuestro cant√≥n Pastaza y beneficiar√° directamente a los ciudadanos de Puyo y las parroquias rurales.

CONCEJAL G√ìMEZ ARIAS: Se√±or Alcalde, considero que esta propuesta merece un an√°lisis detallado. El cant√≥n Pastaza, ubicado en el coraz√≥n de la Amazon√≠a ecuatoriana, requiere pol√≠ticas que respeten nuestro patrimonio natural y cultural.

CONCEJAL GUEVARA PAB√ìN: Estoy de acuerdo con el colega G√≥mez. Debemos considerar el impacto en las comunidades ind√≠genas Shuar y Achuar de nuestro territorio, as√≠ como en los colonos que han hecho de Pastaza su hogar.

CONCEJAL MEZA BRACHO: Se√±or Alcalde, me parece importante destacar que cualquier decisi√≥n debe estar alineada con los objetivos del Plan de Desarrollo y Ordenamiento Territorial del cant√≥n Pastaza 2020-2025.

DIRECTOR DE PLANIFICACI√ìN: Se√±ores concejales, desde el aspecto t√©cnico podemos confirmar que la propuesta cumple con la normativa vigente y est√° enmarcada en las competencias municipales establecidas en el COOTAD.

ALCALDE FLORES MEZA: Agradezco las intervenciones de los se√±ores concejales. Esta administraci√≥n municipal mantiene el compromiso de trabajar por el bienestar de todos los pastacenses, promoviendo el desarrollo arm√≥nico entre la conservaci√≥n ambiental y el progreso econ√≥mico.

CONCEJAL RODR√çGUEZ VILLAVICENCIO: Solicito que se incluya en el proyecto las medidas de mitigaci√≥n ambiental correspondientes, considerando que Pastaza es una provincia eminentemente ecol√≥gica.

CONCEJAL P√âREZ HEREDIA: Apoyo la moci√≥n del colega Rodr√≠guez. Adem√°s, sugiero que se establezcan mecanismos de participaci√≥n ciudadana para que la comunidad pueda expresar sus opiniones.

ALCALDE FLORES MEZA: Se toma nota de las observaciones y sugerencias de los se√±ores concejales. Sometemos a votaci√≥n la propuesta con las modificaciones sugeridas.

SECRETARIA GENERAL: Se procede a la votaci√≥n nominal.

[VOTACI√ìN REGISTRADA]

ALCALDE FLORES MEZA: Con el resultado de la votaci√≥n, se aprueba la propuesta por mayor√≠a. Se dispone la elaboraci√≥n del documento final para su promulgaci√≥n y publicaci√≥n.

No habiendo m√°s temas que tratar, se da por terminada la sesi√≥n siendo las {(acta.fecha_sesion + timedelta(hours=2, minutes=30)).strftime('%H:%M')} horas del mismo d√≠a.

Elaborado por: Mar√≠a Elena V√°squez Castro - Secretaria General
Revisado por: Segundo Germ√°n Flores Meza - Alcalde
"""
        
        return {
            'texto_completo': texto_completo.strip(),
            'speakers': speakers
        }

    def crear_segmentos_transcripcion(self, transcripcion, contenido):
        """Crear segmentos individuales de la transcripci√≥n"""
        # Dividir el texto en p√°rrafos/segmentos
        parrafos = [p.strip() for p in contenido['texto_completo'].split('\n\n') if p.strip()]
        
        tiempo_actual = 0
        for i, parrafo in enumerate(parrafos[:20]):  # M√°ximo 20 segmentos
            if not parrafo or len(parrafo) < 10:
                continue
                
            # Estimar duraci√≥n del segmento (aprox 3 palabras por segundo)
            palabras = len(parrafo.split())
            duracion = max(10, palabras // 3)  # M√≠nimo 10 segundos
            
            # Identificar speaker
            speaker_identificado = 'SPEAKER_00'
            for j, speaker in enumerate(contenido['speakers']):
                if any(name.upper() in parrafo.upper() for name in speaker.split()):
                    speaker_identificado = f'SPEAKER_{j:02d}'
                    break
            
            SegmentoTranscripcion.objects.create(
                transcripcion=transcripcion,
                numero_segmento=i + 1,
                tiempo_inicio=tiempo_actual,
                tiempo_fin=tiempo_actual + duracion,
                speaker_id=speaker_identificado,
                speaker_label=random.choice(contenido['speakers']),
                texto_original=parrafo,
                texto_corregido=parrafo,  # En demo, asumimos que ya est√° corregido
                confianza=round(random.uniform(0.85, 0.98), 3),
                editado=False,
                timestamp_edicion=None
            )
            
            tiempo_actual += duracion + random.randint(1, 5)  # Pausa entre segmentos

    def crear_auditorias(self):
        """Crear registros de auditor√≠a para actividades municipales"""
        print("üîç Creando registros de auditor√≠a...")
        
        usuarios = User.objects.all()
        actividades = [
            'Creaci√≥n de sesi√≥n municipal',
            'Aprobaci√≥n de acta',
            'Procesamiento de audio completado',
            'Transcripci√≥n revisada',
            'Publicaci√≥n de acta',
            'Consulta de informaci√≥n p√∫blica',
            'Modificaci√≥n de ordenanza',
            'Acceso a portal transparencia'
        ]
        
        auditorias_creadas = 0
        fecha_base = datetime.now() - timedelta(days=90)
        
        for i in range(50):  # 50 registros de auditor√≠a
            fecha_actividad = fecha_base + timedelta(days=random.randint(0, 90))
            
            LogActividad.objects.create(
                usuario=random.choice(usuarios),
                accion=random.choice(actividades),
                modelo_afectado='ActaMunicipal',
                objeto_id=random.randint(1, 12),
                descripcion=f"Actividad municipal registrada desde el sistema de actas",
                ip_address=f"10.0.{random.randint(1,50)}.{random.randint(1,200)}",
                user_agent='Mozilla/5.0 (Sistema Municipal Pastaza)',
                timestamp=fecha_actividad,
                metadata_adicional={
                    'modulo': 'actas_municipales',
                    'canton': 'Pastaza',
                    'ubicacion': 'Puyo'
                }
            )
            auditorias_creadas += 1
            
        print(f"üìä Registros de auditor√≠a creados: {auditorias_creadas}")
        return auditorias_creadas

    def crear_permisos_publicacion(self):
        """Crear permisos de publicaci√≥n para transparencia"""
        print("üîì Configurando permisos de publicaci√≥n...")
        
        actas = ActaMunicipal.objects.filter(estado='publicada')
        permisos_creados = 0
        
        for acta in actas:
            permiso, created = PermisoPublicacion.objects.get_or_create(
                acta=acta,
                defaults={
                    'tipo_acceso': 'publico',
                    'fecha_publicacion': acta.fecha_sesion + timedelta(days=7),
                    'publicado_por': acta.presidida_por,
                    'motivo_publicacion': 'Transparencia y acceso a informaci√≥n p√∫blica municipal',
                    'observaciones': 'Publicaci√≥n autom√°tica seg√∫n LOTAIP'
                }
            )
            if created:
                permisos_creados += 1
                
        print(f"üìä Permisos de publicaci√≥n creados: {permisos_creados}")
        return permisos_creados

    def ejecutar_poblado_completo(self):
        """Ejecutar todo el proceso de poblado de datos"""
        print("üöÄ INICIANDO POBLADO COMPLETO DEL MUNICIPIO DE PASTAZA")
        print("=" * 60)
        
        resultados = {}
        
        try:
            resultados['usuarios'] = self.crear_usuarios()
            resultados['tipos_reunion'] = self.crear_tipos_reunion()
            resultados['sesiones'] = self.crear_sesiones_municipales()
            resultados['auditorias'] = self.crear_auditorias()
            resultados['permisos'] = self.crear_permisos_publicacion()
            
            print("\n" + "=" * 60)
            print("‚úÖ POBLADO COMPLETADO EXITOSAMENTE")
            print("=" * 60)
            print(f"üë• Usuarios creados: {resultados['usuarios']}")
            print(f"üìã Tipos de reuni√≥n: {resultados['tipos_reunion']}")
            print(f"üèõÔ∏è Sesiones municipales: {resultados['sesiones']}")
            print(f"üîç Registros de auditor√≠a: {resultados['auditorias']}")
            print(f"üîì Permisos de publicaci√≥n: {resultados['permisos']}")
            print("\nüéâ El sistema est√° listo con datos realistas del Municipio de Pastaza!")
            print("üåê Sitio web: https://puyo.gob.ec/")
            print("üì± Facebook: https://www.facebook.com/GADMPastaza")
            
        except Exception as e:
            print(f"‚ùå Error durante el poblado: {str(e)}")
            import traceback
            traceback.print_exc()
            
        return resultados


if __name__ == '__main__':
    poblador = PobladorMunicipioPastaza()
    resultados = poblador.ejecutar_poblado_completo()