"""
Script completo de verificaci√≥n del sistema de procesamiento de audio.
Verifica toda la pipeline desde la interfaz hasta el procesamiento.
"""
import os
import sys
import django
from pathlib import Path

# Configurar Django
sys.path.append('/app')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

def verificar_imports():
    """Verifica que todos los m√≥dulos necesarios se importen correctamente"""
    print("üîç Verificando imports...")
    
    try:
        from apps.audio_processing.models import AudioRecording
        print("‚úÖ Modelo AudioRecording importado")
    except Exception as e:
        print(f"‚ùå Error importando modelo: {e}")
        return False
    
    try:
        from apps.audio_processing.views import centro_audio, api_procesar_audio
        print("‚úÖ Vistas importadas")
    except Exception as e:
        print(f"‚ùå Error importando vistas: {e}")
        return False
    
    try:
        from apps.audio_processing.audio_processor import AudioProcessor
        print("‚úÖ AudioProcessor importado")
    except Exception as e:
        print(f"‚ùå Error importando AudioProcessor: {e}")
        return False
    
    try:
        from apps.audio_processing.tasks import procesar_audio_task
        print("‚úÖ Task de Celery importada")
    except Exception as e:
        print(f"‚ùå Error importando task: {e}")
        return False
    
    return True

def verificar_herramientas():
    """Verifica que las herramientas de audio est√©n disponibles"""
    print("\nüõ†Ô∏è Verificando herramientas de audio...")
    
    import subprocess
    
    # Verificar FFmpeg
    try:
        result = subprocess.run(['ffmpeg', '-version'], 
                              capture_output=True, text=True, timeout=5)
        if result.returncode == 0:
            print("‚úÖ FFmpeg disponible")
        else:
            print("‚ùå FFmpeg no funciona correctamente")
            return False
    except Exception as e:
        print(f"‚ùå FFmpeg no encontrado: {e}")
        return False
    
    # Verificar SoX
    try:
        result = subprocess.run(['sox', '--version'], 
                              capture_output=True, text=True, timeout=5)
        if result.returncode == 0:
            print("‚úÖ SoX disponible")
        else:
            print("‚ùå SoX no funciona correctamente")
            return False
    except Exception as e:
        print(f"‚ùå SoX no encontrado: {e}")
        return False
    
    return True

def verificar_directorios():
    """Verifica que los directorios necesarios existan"""
    print("\nüìÅ Verificando directorios...")
    
    directorios = [
        '/app/media',
        '/app/media/audio',
        '/app/staticfiles',
        '/app/templates/audio_processing'
    ]
    
    for directorio in directorios:
        if Path(directorio).exists():
            print(f"‚úÖ {directorio}")
        else:
            print(f"‚ùå {directorio} no existe")
            # Crear directorio si no existe
            try:
                Path(directorio).mkdir(parents=True, exist_ok=True)
                print(f"  ‚úÖ Creado autom√°ticamente")
            except Exception as e:
                print(f"  ‚ùå Error creando directorio: {e}")
                return False
    
    return True

def verificar_database():
    """Verifica la conexi√≥n a la base de datos"""
    print("\nüóÑÔ∏è Verificando base de datos...")
    
    try:
        from django.db import connection
        cursor = connection.cursor()
        cursor.execute("SELECT 1")
        print("‚úÖ Conexi√≥n a base de datos OK")
        
        # Verificar tablas espec√≠ficas
        from apps.audio_processing.models import AudioRecording
        count = AudioRecording.objects.count()
        print(f"‚úÖ Tabla audio_recording accesible ({count} registros)")
        
        return True
    except Exception as e:
        print(f"‚ùå Error de base de datos: {e}")
        return False

def verificar_celery():
    """Verifica que Celery est√© funcionando"""
    print("\n‚ö° Verificando Celery...")
    
    try:
        from celery import Celery
        from config.celery import app
        
        # Verificar que la app de Celery est√© configurada
        print(f"‚úÖ App Celery: {app.main}")
        
        # Verificar que las tareas est√©n registradas
        tasks = app.control.inspect().registered()
        if tasks:
            print("‚úÖ Worker de Celery respondiendo")
            print(f"‚úÖ Tareas registradas: {len(list(tasks.values())[0]) if tasks else 0}")
        else:
            print("‚ö†Ô∏è No se puede conectar con workers de Celery")
        
        return True
    except Exception as e:
        print(f"‚ùå Error con Celery: {e}")
        return False

def probar_procesamiento():
    """Prueba b√°sica del procesamiento de audio"""
    print("\nüéµ Probando procesamiento de audio...")
    
    try:
        from apps.audio_processing.audio_processor import AudioProcessor
        
        # Crear instancia del procesador
        processor = AudioProcessor()
        print("‚úÖ AudioProcessor instanciado")
        
        # Verificar m√©todos principales
        methods = ['get_audio_info', 'normalize_audio', 'reduce_noise', 'enhance_speech']
        for method in methods:
            if hasattr(processor, method):
                print(f"‚úÖ M√©todo {method} disponible")
            else:
                print(f"‚ùå M√©todo {method} no encontrado")
                return False
        
        return True
    except Exception as e:
        print(f"‚ùå Error probando procesamiento: {e}")
        return False

def main():
    """Funci√≥n principal de verificaci√≥n"""
    print("üéØ VERIFICACI√ìN COMPLETA DEL SISTEMA DE AUDIO")
    print("=" * 50)
    
    resultados = []
    
    # Ejecutar todas las verificaciones
    verificaciones = [
        ("Imports", verificar_imports),
        ("Herramientas", verificar_herramientas),
        ("Directorios", verificar_directorios),
        ("Base de datos", verificar_database),
        ("Celery", verificar_celery),
        ("Procesamiento", probar_procesamiento)
    ]
    
    for nombre, funcion in verificaciones:
        try:
            resultado = funcion()
            resultados.append((nombre, resultado))
        except Exception as e:
            print(f"‚ùå Error en {nombre}: {e}")
            resultados.append((nombre, False))
    
    # Resumen final
    print("\n" + "=" * 50)
    print("üìä RESUMEN DE VERIFICACI√ìN")
    print("=" * 50)
    
    exitosos = 0
    for nombre, resultado in resultados:
        status = "‚úÖ" if resultado else "‚ùå"
        print(f"{status} {nombre}")
        if resultado:
            exitosos += 1
    
    print(f"\nüéØ {exitosos}/{len(resultados)} verificaciones exitosas")
    
    if exitosos == len(resultados):
        print("üöÄ ¬°Sistema completamente funcional!")
        print("\nüìù Pr√≥ximos pasos:")
        print("1. Acceder a http://localhost:8000/audio/centro/")
        print("2. Probar grabaci√≥n de audio")
        print("3. Probar carga de archivos")
        print("4. Verificar procesamiento en background")
    else:
        print("‚ö†Ô∏è Hay problemas que requieren atenci√≥n")
        print("Revisa los errores arriba y corrige antes de usar el sistema")
    
    return exitosos == len(resultados)

if __name__ == "__main__":
    main()
