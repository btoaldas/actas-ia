"""
Comando Django para resetear COMPLETAMENTE todo el sistema de actas
Borra toda la informaci√≥n y deja las actas en estado inicial de gesti√≥n
"""

from django.core.management.base import BaseCommand
from django.db import transaction
from django.utils import timezone
import logging

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = 'Resetea COMPLETAMENTE todo el sistema de actas al estado inicial'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--confirm',
            action='store_true',
            help='Confirmar que se quiere hacer el reset completo (DESTRUCTIVO)',
        )
    
    def handle(self, *args, **options):
        
        if not options['confirm']:
            self.stdout.write(
                self.style.ERROR(
                    'üö® PELIGRO: Este comando ELIMINAR√Å TODA la informaci√≥n procesada\n'
                    'üíÄ Esta operaci√≥n es DESTRUCTIVA e IRREVERSIBLE\n'
                    'üî• Todas las actas volver√°n al estado inicial de gesti√≥n\n\n'
                    'Para ejecutar, usar: --confirm\n'
                    'Ejemplo: python manage.py reset_sistema_completo --confirm'
                )
            )
            return
        
        self.stdout.write(
            self.style.WARNING(
                'üî• INICIANDO RESET COMPLETO DEL SISTEMA\n'
                '=' * 60
            )
        )
        
        try:
            with transaction.atomic():
                # PASO 1: Limpiar portal ciudadano
                self._reset_portal_ciudadano()
                
                # PASO 2: Resetear gesti√≥n de actas  
                self._reset_gestion_actas()
                
                # PASO 3: Limpiar registros de auditor√≠a
                self._limpiar_auditoria()
                
                # PASO 4: Limpiar procesamiento de audio
                self._limpiar_audio_processing()
                
            self.stdout.write(
                self.style.SUCCESS(
                    '\nüéâ RESET COMPLETO EXITOSO\n'
                    '‚úÖ Sistema reseteado al estado inicial de gesti√≥n\n'
                    'üéØ Todas las actas listas para edici√≥n/depuraci√≥n\n'
                )
            )
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'üí• ERROR EN RESET: {str(e)}')
            )
            logger.error(f"Error en reset completo: {str(e)}")
    
    def _reset_portal_ciudadano(self):
        """Resetea TODAS las actas del portal ciudadano"""
        self.stdout.write('üßπ Limpiando portal ciudadano...')
        
        from apps.pages.models import ActaMunicipal, VisualizacionActa, DescargaActa
        
        # Contar actas antes
        total_actas = ActaMunicipal.objects.count()
        self.stdout.write(f'üìä Actas a resetear: {total_actas}')
        
        # Eliminar registros de visualizaci√≥n y descarga
        visualizaciones = VisualizacionActa.objects.count()
        descargas = DescargaActa.objects.count()
        
        VisualizacionActa.objects.all().delete()
        DescargaActa.objects.all().delete()
        
        self.stdout.write(f'üóëÔ∏è Eliminados {visualizaciones} registros de visualizaci√≥n')
        self.stdout.write(f'üóëÔ∏è Eliminados {descargas} registros de descarga')
        
        # Resetear TODAS las actas del portal
        import os
        archivos_eliminados = 0
        
        for acta in ActaMunicipal.objects.all():
            # Eliminar archivos f√≠sicos
            for archivo in [acta.archivo_pdf, acta.archivo_word, acta.archivo_txt, acta.imagen_preview]:
                if archivo:
                    try:
                        if hasattr(archivo, 'path') and os.path.exists(archivo.path):
                            os.remove(archivo.path)
                            archivos_eliminados += 1
                        archivo.delete(save=False)
                    except Exception as e:
                        logger.warning(f"Error eliminando archivo: {str(e)}")
            
            # Resetear campos del acta
            acta.contenido = ""
            acta.resumen = ""
            acta.orden_del_dia = ""
            acta.acuerdos = ""
            acta.palabras_clave = ""
            acta.observaciones = ""
            acta.transcripcion_ia = False
            acta.precision_ia = None
            acta.tiempo_procesamiento = None
            acta.fecha_publicacion = None
            acta.asistentes = ""
            acta.ausentes = ""
            acta.acceso = 'publico'
            acta.activo = False  # Despublicar del portal
            acta.prioridad = 'normal'
            
            # Limpiar archivos
            acta.archivo_pdf = None
            acta.archivo_word = None
            acta.archivo_txt = None
            acta.imagen_preview = None
            
            acta.save()
        
        self.stdout.write(f'‚úÖ {total_actas} actas reseteadas en portal ciudadano')
        self.stdout.write(f'üóëÔ∏è {archivos_eliminados} archivos f√≠sicos eliminados')
    
    def _reset_gestion_actas(self):
        """ELIMINA TODAS las actas de gesti√≥n manual y resetea al estado inicial"""
        self.stdout.write('üîÑ Eliminando gesti√≥n de actas...')
        
        try:
            from gestion_actas.models import GestionActa, EstadoGestionActa, ProcesoRevision
            
            # Contar actas en gesti√≥n antes de eliminar
            total_gestion = GestionActa.objects.count()
            self.stdout.write(f'üìä Actas en gesti√≥n a ELIMINAR: {total_gestion}')
            
            # Eliminar TODOS los procesos de revisi√≥n primero
            procesos_revision = ProcesoRevision.objects.count()
            ProcesoRevision.objects.all().delete()
            self.stdout.write(f'üóëÔ∏è Eliminados {procesos_revision} procesos de revisi√≥n')
            
            # ELIMINAR COMPLETAMENTE todas las actas de gesti√≥n
            GestionActa.objects.all().delete()
            self.stdout.write(f'üî• ELIMINADAS {total_gestion} actas de gesti√≥n manual')
            
            # Obtener o crear estado inicial para futuras actas
            estado_inicial, created = EstadoGestionActa.objects.get_or_create(
                codigo='en_edicion',
                defaults={
                    'nombre': 'En Edici√≥n/Depuraci√≥n',
                    'descripcion': 'Acta en proceso de edici√≥n y depuraci√≥n',
                    'color': '#6c757d',
                    'orden': 1,
                    'activo': True,
                    'permite_edicion': True,
                    'requiere_revision': False,
                    'visible_portal': False
                }
            )
            
            if created:
                self.stdout.write('üìù Estado "En Edici√≥n" preparado para nuevas actas')
            
        except ImportError:
            self.stdout.write('‚ö†Ô∏è M√≥dulo gestion_actas no disponible')
    
    def _limpiar_auditoria(self):
        """Limpia registros de auditor√≠a del sistema"""
        self.stdout.write('üßπ Limpiando registros de auditor√≠a...')
        
        try:
            from apps.auditoria.models import LogAccion
            
            logs_count = LogAccion.objects.count()
            # Mantener solo logs cr√≠ticos del sistema
            LogAccion.objects.filter(
                accion__in=['login', 'logout', 'error_critico']
            ).delete()
            
            self.stdout.write(f'üóëÔ∏è Limpiados registros de auditor√≠a no cr√≠ticos')
            
        except ImportError:
            self.stdout.write('‚ÑπÔ∏è M√≥dulo auditor√≠a no disponible')
    
    def _limpiar_audio_processing(self):
        """Limpia registros de procesamiento de audio"""
        self.stdout.write('üéµ Limpiando procesamiento de audio...')
        
        try:
            from apps.audio_processing.models import ProcesamientoAudio
            
            audio_count = ProcesamientoAudio.objects.count()
            ProcesamientoAudio.objects.all().delete()
            
            self.stdout.write(f'üóëÔ∏è Eliminados {audio_count} registros de procesamiento de audio')
            
        except ImportError:
            self.stdout.write('‚ÑπÔ∏è M√≥dulo audio_processing no disponible')