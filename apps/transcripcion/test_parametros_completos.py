#!/usr/bin/env python3
"""
Test completo para verificar transmisi√≥n de par√°metros desde proceso_transcripcion 
hasta whisper_helper y pyannote_helper
"""

import os
import sys
import django

# Setup Django path
app_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
project_dir = os.path.dirname(app_dir)
sys.path.insert(0, project_dir)

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from apps.transcripcion.models import Transcripcion
from django.contrib.auth.models import User
import json

def test_parametros_transmision():
    print("üß™ TEST: Verificaci√≥n completa de transmisi√≥n de par√°metros\n")
    
    # Simular par√°metros exactos como los env√≠a proceso_transcripcion
    configuracion_simulada = {
        # PAR√ÅMETROS WHISPER ESPEC√çFICOS
        'modelo_whisper': 'medium',  # El usuario seleccion√≥ "medium"
        'idioma': 'es',
        'temperatura': 0.2,
        
        # PAR√ÅMETROS PYANNOTE ROBUSTOS
        'diarizacion_activa': True,
        'modelo_diarizacion': 'pyannote/speaker-diarization-3.1',
        'clustering_threshold': 0.5,
        'embedding_batch_size': 32,
        'segmentation_batch_size': 32,
        
        # PARTICIPANTES ESPERADOS EN ORDEN ESPEC√çFICO
        'participantes_esperados': [
            {
                'orden': 1,
                'nombres': 'Mar√≠a Elena',
                'apellidos': 'Garc√≠a',
                'nombre_completo': 'Mar√≠a Elena Garc√≠a',
                'cargo': 'Secretaria',
                'institucion': 'Municipio',
                'id': 'hablante_1',
                'activo': True
            },
            {
                'orden': 2, 
                'nombres': 'Juan Carlos',
                'apellidos': 'P√©rez',
                'nombre_completo': 'Juan Carlos P√©rez',
                'cargo': 'Alcalde',
                'institucion': 'Municipio',
                'id': 'hablante_2',
                'activo': True
            },
            {
                'orden': 3,
                'nombres': 'Roberto',
                'apellidos': 'Molina',
                'nombre_completo': 'Roberto Molina',
                'cargo': 'Concejal',
                'institucion': 'Municipio',
                'id': 'hablante_3',
                'activo': True
            }
        ],
        'hablantes_predefinidos': [  # Alias para backend
            {
                'orden': 1,
                'nombres': 'Mar√≠a Elena',
                'apellidos': 'Garc√≠a',
                'nombre_completo': 'Mar√≠a Elena Garc√≠a',
                'cargo': 'Secretaria',
                'institucion': 'Municipio',
                'id': 'hablante_1',
                'activo': True
            },
            {
                'orden': 2,
                'nombres': 'Juan Carlos', 
                'apellidos': 'P√©rez',
                'nombre_completo': 'Juan Carlos P√©rez',
                'cargo': 'Alcalde',
                'institucion': 'Municipio',
                'id': 'hablante_2',
                'activo': True
            },
            {
                'orden': 3,
                'nombres': 'Roberto',
                'apellidos': 'Molina', 
                'nombre_completo': 'Roberto Molina',
                'cargo': 'Concejal',
                'institucion': 'Municipio',
                'id': 'hablante_3',
                'activo': True
            }
        ]
    }
    
    print("üìä CONFIGURACI√ìN SIMULADA:")
    print(f"   - Modelo Whisper solicitado: {configuracion_simulada['modelo_whisper']}")
    print(f"   - Idioma: {configuracion_simulada['idioma']}")
    print(f"   - Diarizaci√≥n activa: {configuracion_simulada['diarizacion_activa']}")
    print(f"   - Modelo diarizaci√≥n: {configuracion_simulada['modelo_diarizacion']}")
    print(f"   - Clustering threshold: {configuracion_simulada['clustering_threshold']}")
    print(f"   - Participantes esperados: {len(configuracion_simulada['participantes_esperados'])}")
    
    for i, participante in enumerate(configuracion_simulada['participantes_esperados']):
        print(f"     {i+1}. {participante['nombre_completo']} ({participante['cargo']})")
    
    print("\n" + "="*60)
    
    # TEST 1: Verificar que get_configuracion_completa() incluye estos par√°metros
    print("\nüîç TEST 1: M√©todo get_configuracion_completa()")
    
    # Crear transcripci√≥n de prueba
    try:
        # Buscar un usuario existente o crear uno de prueba
        try:
            usuario = User.objects.first()
            if not usuario:
                usuario = User.objects.create_user('test_user', 'test@test.com', 'password')
        except:
            usuario = User.objects.create_user('test_user', 'test@test.com', 'password')
        
        # Buscar una transcripci√≥n existente para probar
        transcripcion = Transcripcion.objects.first()
        if not transcripcion:
            print("‚ùå No hay transcripciones disponibles para probar")
            return
            
        # Simular que guardamos los par√°metros personalizados 
        transcripcion.parametros_personalizados = configuracion_simulada
        transcripcion.save()
        
        # Probar get_configuracion_completa()
        config_completa = transcripcion.get_configuracion_completa()
        
        print(f"‚úÖ Configuraci√≥n completa obtenida: {len(config_completa)} par√°metros")
        
        # Verificar par√°metros clave
        modelo_recibido = config_completa.get('modelo_whisper', 'NO_ENCONTRADO')
        print(f"   - Modelo Whisper: {modelo_recibido}")
        
        if modelo_recibido == 'medium':
            print("   ‚úÖ Modelo Whisper correcto (medium)")
        else:
            print(f"   ‚ùå Modelo Whisper incorrecto: esperado 'medium', recibido '{modelo_recibido}'")
        
        # Verificar participantes
        participantes_recibidos = config_completa.get('participantes_esperados', [])
        print(f"   - Participantes esperados: {len(participantes_recibidos)}")
        
        if len(participantes_recibidos) == 3:
            print("   ‚úÖ Cantidad de participantes correcta")
            for i, p in enumerate(participantes_recibidos):
                print(f"     {i+1}. {p.get('nombre_completo', 'SIN_NOMBRE')}")
        else:
            print(f"   ‚ùå Cantidad incorrecta: esperado 3, recibido {len(participantes_recibidos)}")
            
    except Exception as e:
        print(f"‚ùå Error en test de configuraci√≥n: {str(e)}")
    
    print("\n" + "="*60)
    
    # TEST 2: Verificar que Whisper Helper recibe par√°metros correctos
    print("\nüîç TEST 2: Whisper Helper - Recepci√≥n de par√°metros")
    
    try:
        from apps.transcripcion.whisper_helper_audit import WhisperProcessor
        
        processor = WhisperProcessor()
        print("‚úÖ WhisperProcessor cargado")
        
        # Simular archivo de audio temporal
        archivo_test = "test_audio.wav"
        
        # Llamar m√©todo con configuraci√≥n simulada
        print(f"\nüìû Llamando transcribir_audio con modelo: {configuracion_simulada['modelo_whisper']}")
        
        # Nota: Este test verificar√° los logs AUDIT para confirmar par√°metros
        # No procesa audio real, solo verifica par√°metros
        
        print("üí° Revisar logs AUDIT para confirmar par√°metros recibidos")
        
    except Exception as e:
        print(f"‚ùå Error en test Whisper: {str(e)}")
        
    print("\n" + "="*60)
    
    # TEST 3: Verificar que pyannote respeta orden de participantes
    print("\nüîç TEST 3: Pyannote Helper - Mapeo de participantes")
    
    try:
        from apps.transcripcion.pyannote_helper import PyannoteProcessor
        
        processor = PyannoteProcessor()
        print("‚úÖ PyannoteProcessor cargado")
        
        # Simular resultado de diarizaci√≥n de pyannote
        from pyannote.core import Annotation, Segment
        
        diarizacion_simulada = Annotation()
        # IMPORTANTE: Simular que pyannote detecta en este orden:
        # SPEAKER_00 habla primero (0-5s)
        # SPEAKER_01 habla segundo (10-15s) 
        # SPEAKER_02 habla tercero (20-25s)
        diarizacion_simulada[Segment(0.0, 5.0)] = "SPEAKER_00"
        diarizacion_simulada[Segment(10.0, 15.0)] = "SPEAKER_01"
        diarizacion_simulada[Segment(20.0, 25.0)] = "SPEAKER_02"
        
        print("\nüìä DIARIZACI√ìN SIMULADA DE PYANNOTE:")
        print("   - SPEAKER_00: 0.0s - 5.0s  (PRIMERO en hablar)")
        print("   - SPEAKER_01: 10.0s - 15.0s (SEGUNDO en hablar)")
        print("   - SPEAKER_02: 20.0s - 25.0s (TERCERO en hablar)")
        
        print("\nüë• PARTICIPANTES ESPERADOS POR USUARIO (orden JSON):")
        for i, p in enumerate(configuracion_simulada['participantes_esperados']):
            print(f"   - Posici√≥n {i+1}: {p['nombre_completo']} ({p['cargo']})")
        
        # Llamar mapeo inteligente
        resultado = processor._procesar_resultado_diarizacion_inteligente(
            diarizacion_simulada,
            configuracion_simulada['participantes_esperados']
        )
        
        print("\nüéØ RESULTADO DEL MAPEO INTELIGENTE:")
        mapeo = resultado.get('mapeo_speakers', {})
        
        # Verificar si el mapeo respeta el orden de aparici√≥n
        for speaker_original, info in mapeo.items():
            nombre_mapeado = info.get('nombre', 'SIN_NOMBRE')
            tiempo_aparicion = info.get('tiempo_primera_aparicion', 0)
            print(f"   - {speaker_original} ‚Üí {nombre_mapeado} (aparici√≥n: {tiempo_aparicion}s)")
        
        # Verificar mapeo esperado:
        # SPEAKER_00 (aparece a 0s) ‚Üí Mar√≠a Elena Garc√≠a (posici√≥n 1 en JSON)
        # SPEAKER_01 (aparece a 10s) ‚Üí Juan Carlos P√©rez (posici√≥n 2 en JSON)
        # SPEAKER_02 (aparece a 20s) ‚Üí Roberto Molina (posici√≥n 3 en JSON)
        
        mapeo_correcto = True
        if 'SPEAKER_00' in mapeo and mapeo['SPEAKER_00']['nombre'] == 'Mar√≠a Elena Garc√≠a':
            print("   ‚úÖ SPEAKER_00 ‚Üí Mar√≠a Elena Garc√≠a (CORRECTO)")
        else:
            print("   ‚ùå SPEAKER_00 mal mapeado")
            mapeo_correcto = False
            
        if 'SPEAKER_01' in mapeo and mapeo['SPEAKER_01']['nombre'] == 'Juan Carlos P√©rez':
            print("   ‚úÖ SPEAKER_01 ‚Üí Juan Carlos P√©rez (CORRECTO)")
        else:
            print("   ‚ùå SPEAKER_01 mal mapeado")
            mapeo_correcto = False
            
        if 'SPEAKER_02' in mapeo and mapeo['SPEAKER_02']['nombre'] == 'Roberto Molina':
            print("   ‚úÖ SPEAKER_02 ‚Üí Roberto Molina (CORRECTO)")
        else:
            print("   ‚ùå SPEAKER_02 mal mapeado")
            mapeo_correcto = False
        
        if mapeo_correcto:
            print("\nüéâ MAPEO INTELIGENTE FUNCIONANDO CORRECTAMENTE")
        else:
            print("\n‚ùå PROBLEMA EN MAPEO INTELIGENTE")
            
    except Exception as e:
        print(f"‚ùå Error en test pyannote: {str(e)}")
        import traceback
        traceback.print_exc()
    
    print("\n" + "="*80)
    print("üèÅ TEST COMPLETADO")
    print("üìã VERIFICAR:")
    print("   1. ¬øWhisper recibe modelo 'medium' o muestra 'unknown'?")
    print("   2. ¬øPyannote mapea seg√∫n orden de aparici√≥n o seg√∫n JSON usuario?")
    print("   3. ¬øLos par√°metros personalizados llegan a get_configuracion_completa()?")

if __name__ == "__main__":
    test_parametros_transmision()