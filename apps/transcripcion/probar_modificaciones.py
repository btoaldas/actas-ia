#!/usr/bin/env python3
"""
Script para probar todas las modificaciones de transcripci√≥n
"""

import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from apps.transcripcion.models import Transcripcion
from apps.transcripcion.tasks import procesar_transcripcion_completa

def probar_transcripcion_88():
    """Prueba la transcripci√≥n 88 con las nuevas modificaciones"""
    
    print("üß™ PROBANDO TRANSCRIPCI√ìN 88 CON MODIFICACIONES")
    print("=" * 60)
    
    try:
        # Verificar que existe la transcripci√≥n
        transcripcion = Transcripcion.objects.get(id=88)
        print(f"‚úÖ Transcripci√≥n {transcripcion.id} encontrada")
        print(f"   - Estado actual: {transcripcion.estado}")
        print(f"   - Audio ID: {transcripcion.procesamiento_audio.id}")
        
        # Verificar participantes
        participantes = transcripcion.procesamiento_audio.participantes_detallados
        print(f"   - Participantes configurados: {len(participantes)}")
        for i, p in enumerate(participantes):
            print(f"     {i}: {p.get('nombres', 'Sin nombre')}")
        
        # Obtener configuraci√≥n completa
        config = transcripcion.get_configuracion_completa()
        participantes_config = config.get('participantes_esperados', [])
        print(f"   - Participantes en configuraci√≥n: {len(participantes_config)}")
        
        # Verificar que min_speakers = max_speakers = n√∫mero de participantes
        min_speakers = config.get('min_speakers', 'No definido')
        max_speakers = config.get('max_speakers', 'No definido')
        print(f"   - min_speakers: {min_speakers}")
        print(f"   - max_speakers: {max_speakers}")
        
        print("\nüöÄ INICIANDO PROCESAMIENTO CON CONFIGURACI√ìN FORZADA")
        print("=" * 60)
        
        # Procesar con las nuevas modificaciones
        result = procesar_transcripcion_completa.delay(88)
        print(f"‚úÖ Tarea iniciada con ID: {result.id}")
        print("‚è≥ Procesando... (puedes revisar logs del worker)")
        
        return True
        
    except Transcripcion.DoesNotExist:
        print("‚ùå Transcripci√≥n 88 no encontrada")
        return False
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        return False

def verificar_configuracion():
    """Verifica que la configuraci√≥n est√© correcta"""
    
    print("\nüîç VERIFICANDO CONFIGURACI√ìN")
    print("=" * 60)
    
    try:
        transcripcion = Transcripcion.objects.get(id=88)
        config = transcripcion.get_configuracion_completa()
        
        participantes = config.get('participantes_esperados', [])
        min_speakers = config.get('min_speakers')
        max_speakers = config.get('max_speakers')
        
        print(f"Participantes esperados: {len(participantes)}")
        print(f"Min speakers: {min_speakers}")
        print(f"Max speakers: {max_speakers}")
        
        # Verificar que est√©n configurados para forzar el n√∫mero exacto
        if participantes and len(participantes) >= 2:
            num_participantes = len(participantes)
            if min_speakers == num_participantes and max_speakers == num_participantes:
                print(f"‚úÖ CONFIGURACI√ìN CORRECTA: Forzando {num_participantes} speakers")
                return True
            else:
                print(f"‚ö†Ô∏è CONFIGURACI√ìN SUB√ìPTIMA: min={min_speakers}, max={max_speakers}, participantes={num_participantes}")
                return False
        else:
            print("‚ö†Ô∏è No hay suficientes participantes configurados")
            return False
            
    except Exception as e:
        print(f"‚ùå Error verificando configuraci√≥n: {str(e)}")
        return False

if __name__ == "__main__":
    print("üîß SCRIPT DE PRUEBA DE TRANSCRIPCI√ìN MEJORADA")
    print("=" * 60)
    
    # Verificar configuraci√≥n
    config_ok = verificar_configuracion()
    
    if config_ok:
        # Probar transcripci√≥n
        resultado = probar_transcripcion_88()
        
        if resultado:
            print("\n‚úÖ PRUEBA INICIADA CORRECTAMENTE")
            print("üí° PR√ìXIMOS PASOS:")
            print("   1. Revisar logs del worker: docker logs --tail=50 actas_celery_worker")
            print("   2. Verificar estructura: python verificar_estructura_completa.py")
            print("   3. Buscar mapeos: 'MAPEO: SPEAKER_XX ‚Üí Nombre'")
        else:
            print("\n‚ùå PRUEBA FALL√ì")
    else:
        print("\n‚ùå CONFIGURACI√ìN INCORRECTA")